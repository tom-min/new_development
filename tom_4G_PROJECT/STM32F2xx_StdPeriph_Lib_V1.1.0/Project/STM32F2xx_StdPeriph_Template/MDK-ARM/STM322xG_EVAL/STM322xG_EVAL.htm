<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\STM322xG_EVAL\STM322xG_EVAL.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\STM322xG_EVAL\STM322xG_EVAL.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Fri Mar 01 16:24:01 2019
<BR><P>
<H3>Maximum Stack Usage =       4240 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
PassThru_CAN_TxPack_Normal_Multiple &rArr; PassThru_CAN_TxPack_Normal &rArr; PassThru_CAN_TxMuchPack_DelayTime &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[a4]">ALL_KEEP_COM</a> from passthru.o(i.ALL_KEEP_COM) referenced from mmain.o(i.SpecialFun)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f2xx_it.o(i.BusFault_Handler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4c]">CAN2_SCE_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[49]">CAN2_TX_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[59]">CRYP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[58]">DCMI_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream7_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream0_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream3_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream4_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream5_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream6_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream7_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f2xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[47]">ETH_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[48]">ETH_WKUP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[a6]">GET_LINE_STATUS</a> from hardware.o(i.GET_LINE_STATUS) referenced from selftest.o(i.adjust_pulse_width)
 <LI><a href="#[a6]">GET_LINE_STATUS</a> from hardware.o(i.GET_LINE_STATUS) referenced from selftest.o(i.kl_pulse)
 <LI><a href="#[a6]">GET_LINE_STATUS</a> from hardware.o(i.GET_LINE_STATUS) referenced from selftest.o(i.nissan_pulse_test)
 <LI><a href="#[5a]">HASH_RNG_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f2xx_it.o(i.HardFault_Handler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[a2]">MCU_UARTGetByte</a> from mcu_uart.o(i.MCU_UARTGetByte) referenced from hardware.o(i.Set_DrvPort)
 <LI><a href="#[a2]">MCU_UARTGetByte</a> from mcu_uart.o(i.MCU_UARTGetByte) referenced from mmain.o(i._SysFunc)
 <LI><a href="#[a3]">MCU_UARTSendByte</a> from mcu_uart.o(i.MCU_UARTSendByte) referenced from hardware.o(i.Set_DrvPort)
 <LI><a href="#[a3]">MCU_UARTSendByte</a> from mcu_uart.o(i.MCU_UARTSendByte) referenced from mmain.o(i._SysFunc)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f2xx_it.o(i.MemManage_Handler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f2xx_it.o(i.NMI_Handler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4d]">OTG_FS_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[34]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[54]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[60]">PassThru_BENZ_InitEcu</a> from passthru_benz.o(i.PassThru_BENZ_InitEcu) referenced from passthru_benz.o(i.PassThru_BENZ_InitPort)
 <LI><a href="#[b2]">PassThru_BENZ_InitPort</a> from passthru_benz.o(i.PassThru_BENZ_InitPort) referenced from mmain.o(.constdata)
 <LI><a href="#[64]">PassThru_BENZ_RxPack_DirectRead</a> from passthru_benz.o(i.PassThru_BENZ_RxPack_DirectRead) referenced from passthru_benz.o(i.PassThru_BENZ_InitPort)
 <LI><a href="#[62]">PassThru_BENZ_RxPack_Normal</a> from passthru_benz.o(i.PassThru_BENZ_RxPack_Normal) referenced from passthru_benz.o(i.PassThru_BENZ_InitPort)
 <LI><a href="#[63]">PassThru_BENZ_RxPack_SimuEcu</a> from passthru_benz.o(i.PassThru_BENZ_RxPack_SimuEcu) referenced from passthru_benz.o(i.PassThru_BENZ_InitPort)
 <LI><a href="#[b1]">PassThru_BENZ_SetConfig</a> from passthru_benz.o(i.PassThru_BENZ_SetConfig) referenced from mmain.o(.constdata)
 <LI><a href="#[61]">PassThru_BENZ_TxPack_Normal</a> from passthru_benz.o(i.PassThru_BENZ_TxPack_Normal) referenced from passthru_benz.o(i.PassThru_BENZ_InitPort)
 <LI><a href="#[65]">PassThru_BENZ_TxPack_WithRev</a> from passthru_benz.o(i.PassThru_BENZ_TxPack_WithRev) referenced from passthru_benz.o(i.PassThru_BENZ_InitPort)
 <LI><a href="#[a8]">PassThru_CAN_InitPort</a> from passthru_can.o(i.PassThru_CAN_InitPort) referenced from mmain.o(.constdata)
 <LI><a href="#[8a]">PassThru_CAN_RxPack_Auto</a> from passthru_can.o(i.PassThru_CAN_RxPack_Auto) referenced from passthru_can.o(i.PassThru_SET_EACH_FUN)
 <LI><a href="#[92]">PassThru_CAN_RxPack_AutoExt_ReadOnly</a> from passthru_can.o(i.PassThru_CAN_RxPack_AutoExt_ReadOnly) referenced from passthru_can.o(i.PassThru_SET_EACH_FUN)
 <LI><a href="#[8b]">PassThru_CAN_RxPack_Auto_Ext</a> from passthru_can.o(i.PassThru_CAN_RxPack_Auto_Ext) referenced from passthru_can.o(i.PassThru_SET_EACH_FUN)
 <LI><a href="#[98]">PassThru_CAN_RxPack_Auto_GM</a> from passthru_can.o(i.PassThru_CAN_RxPack_Auto_GM) referenced from passthru_can.o(i.PassThru_SET_EACH_FUN)
 <LI><a href="#[90]">PassThru_CAN_RxPack_Auto_ReadOnly</a> from passthru_can.o(i.PassThru_CAN_RxPack_Auto_ReadOnly) referenced from passthru_can.o(i.PassThru_SET_EACH_FUN)
 <LI><a href="#[86]">PassThru_CAN_RxPack_GetID</a> from passthru_can.o(i.PassThru_CAN_RxPack_GetID) referenced from passthru_can.o(i.PassThru_SET_EACH_FUN)
 <LI><a href="#[94]">PassThru_CAN_RxPack_Head</a> from passthru_can.o(i.PassThru_CAN_RxPack_Head) referenced from passthru_can.o(i.PassThru_SET_EACH_FUN)
 <LI><a href="#[8e]">PassThru_CAN_RxPack_J1939</a> from passthru_can.o(i.PassThru_CAN_RxPack_J1939) referenced from passthru_can.o(i.PassThru_SET_EACH_FUN)
 <LI><a href="#[8c]">PassThru_CAN_RxPack_J1939_ReadOnly</a> from passthru_can.o(i.PassThru_CAN_RxPack_J1939_ReadOnly) referenced from passthru_can.o(i.PassThru_SET_EACH_FUN)
 <LI><a href="#[96]">PassThru_CAN_RxPack_J1939_ReadPGN</a> from passthru_can.o(i.PassThru_CAN_RxPack_J1939_ReadPGN) referenced from passthru_can.o(i.PassThru_SET_EACH_FUN)
 <LI><a href="#[88]">PassThru_CAN_RxPack_Normal</a> from passthru_can.o(i.PassThru_CAN_RxPack_Normal) referenced from passthru_can.o(i.PassThru_SET_EACH_FUN)
 <LI><a href="#[9c]">PassThru_CAN_RxPack_Normal_Multiple</a> from passthru_can.o(i.PassThru_CAN_RxPack_Normal_Multiple) referenced from passthru_can.o(i.PassThru_SET_EACH_FUN)
 <LI><a href="#[83]">PassThru_CAN_RxPack_NotID</a> from passthru_can.o(i.PassThru_CAN_RxPack_NotID) referenced from passthru_can.o(i.PassThru_SET_EACH_FUN)
 <LI><a href="#[a7]">PassThru_CAN_SetConfig</a> from passthru_can.o(i.PassThru_CAN_SetConfig) referenced from mmain.o(.constdata)
 <LI><a href="#[91]">PassThru_CAN_TxPack_Auto</a> from passthru_can.o(i.PassThru_CAN_TxPack_Auto) referenced from passthru_can.o(i.PassThru_SET_EACH_FUN)
 <LI><a href="#[93]">PassThru_CAN_TxPack_Auto_Ext</a> from passthru_can.o(i.PassThru_CAN_TxPack_Auto_Ext) referenced from passthru_can.o(i.PassThru_SET_EACH_FUN)
 <LI><a href="#[99]">PassThru_CAN_TxPack_Auto_GM</a> from passthru_can.o(i.PassThru_CAN_TxPack_Auto_GM) referenced from passthru_can.o(i.PassThru_SET_EACH_FUN)
 <LI><a href="#[87]">PassThru_CAN_TxPack_GetID</a> from passthru_can.o(i.PassThru_CAN_TxPack_GetID) referenced from passthru_can.o(i.PassThru_SET_EACH_FUN)
 <LI><a href="#[95]">PassThru_CAN_TxPack_Head</a> from passthru_can.o(i.PassThru_CAN_TxPack_Head) referenced from passthru_can.o(i.PassThru_SET_EACH_FUN)
 <LI><a href="#[8f]">PassThru_CAN_TxPack_J1939</a> from passthru_can.o(i.PassThru_CAN_TxPack_J1939) referenced from passthru_can.o(i.PassThru_SET_EACH_FUN)
 <LI><a href="#[8d]">PassThru_CAN_TxPack_J1939_SendOnly</a> from passthru_can.o(i.PassThru_CAN_TxPack_J1939_SendOnly) referenced from passthru_can.o(i.PassThru_SET_EACH_FUN)
 <LI><a href="#[97]">PassThru_CAN_TxPack_J1939_SendPGN</a> from passthru_can.o(i.PassThru_CAN_TxPack_J1939_SendPGN) referenced from passthru_can.o(i.PassThru_SET_EACH_FUN)
 <LI><a href="#[89]">PassThru_CAN_TxPack_Normal</a> from passthru_can.o(i.PassThru_CAN_TxPack_Normal) referenced from passthru_can.o(i.PassThru_SET_EACH_FUN)
 <LI><a href="#[9d]">PassThru_CAN_TxPack_Normal_Multiple</a> from passthru_can.o(i.PassThru_CAN_TxPack_Normal_Multiple) referenced from passthru_can.o(i.PassThru_SET_EACH_FUN)
 <LI><a href="#[84]">PassThru_CAN_TxPack_NotID</a> from passthru_can.o(i.PassThru_CAN_TxPack_NotID) referenced from passthru_can.o(i.PassThru_SET_EACH_FUN)
 <LI><a href="#[85]">PassThru_CAN_TxPack_NotID_Flash</a> from passthru_can.o(i.PassThru_CAN_TxPack_NotID_Flash) referenced from passthru_can.o(i.PassThru_SET_EACH_FUN)
 <LI><a href="#[9a]">PassThru_CAN_TxPack_flash_read</a> from passthru_can.o(i.PassThru_CAN_TxPack_flash_read) referenced from passthru_can.o(i.PassThru_SET_EACH_FUN)
 <LI><a href="#[9b]">PassThru_CAN_TxPack_flash_read_pos</a> from passthru_can.o(i.PassThru_CAN_TxPack_flash_read_pos) referenced from passthru_can.o(i.PassThru_SET_EACH_FUN)
 <LI><a href="#[b0]">PassThru_ISO_InitPort</a> from passthru_iso.o(i.PassThru_ISO_InitPort) referenced from mmain.o(.constdata)
 <LI><a href="#[66]">PassThru_ISO_Init_Slow</a> from passthru_iso.o(i.PassThru_ISO_Init_Slow) referenced from passthru_iso.o(i.PassThru_ISO_InitPort)
 <LI><a href="#[68]">PassThru_ISO_RxPack_Normal</a> from passthru_iso.o(i.PassThru_ISO_RxPack_Normal) referenced from passthru_iso.o(i.PassThru_ISO_InitPort)
 <LI><a href="#[68]">PassThru_ISO_RxPack_Normal</a> from passthru_iso.o(i.PassThru_ISO_RxPack_Normal) referenced from passthru_iso.o(i.PassThru_ISO_Init_Slow)
 <LI><a href="#[6a]">PassThru_ISO_RxPack_WABCO</a> from passthru_iso.o(i.PassThru_ISO_RxPack_WABCO) referenced from passthru_iso.o(i.PassThru_ISO_InitPort)
 <LI><a href="#[6a]">PassThru_ISO_RxPack_WABCO</a> from passthru_iso.o(i.PassThru_ISO_RxPack_WABCO) referenced from passthru_iso.o(i.PassThru_ISO_Init_Slow)
 <LI><a href="#[af]">PassThru_ISO_SetConfig</a> from passthru_iso.o(i.PassThru_ISO_SetConfig) referenced from mmain.o(.constdata)
 <LI><a href="#[67]">PassThru_ISO_TxPack_Normal</a> from passthru_iso.o(i.PassThru_ISO_TxPack_Normal) referenced from passthru_iso.o(i.PassThru_ISO_InitPort)
 <LI><a href="#[67]">PassThru_ISO_TxPack_Normal</a> from passthru_iso.o(i.PassThru_ISO_TxPack_Normal) referenced from passthru_iso.o(i.PassThru_ISO_Init_Slow)
 <LI><a href="#[69]">PassThru_ISO_TxPack_WABCO</a> from passthru_iso.o(i.PassThru_ISO_TxPack_WABCO) referenced from passthru_iso.o(i.PassThru_ISO_InitPort)
 <LI><a href="#[69]">PassThru_ISO_TxPack_WABCO</a> from passthru_iso.o(i.PassThru_ISO_TxPack_WABCO) referenced from passthru_iso.o(i.PassThru_ISO_Init_Slow)
 <LI><a href="#[ae]">PassThru_KWP_InitPort</a> from passthru_kwp.o(i.PassThru_KWP_InitPort) referenced from mmain.o(.constdata)
 <LI><a href="#[6f]">PassThru_KWP_Init_Fast</a> from passthru_kwp.o(i.PassThru_KWP_Init_Fast) referenced from passthru_kwp.o(i.PassThru_KWP_InitPort)
 <LI><a href="#[72]">PassThru_KWP_Init_Slow</a> from passthru_kwp.o(i.PassThru_KWP_Init_Slow) referenced from passthru_kwp.o(i.PassThru_KWP_InitPort)
 <LI><a href="#[78]">PassThru_KWP_RxPack_Cater</a> from passthru_kwp.o(i.PassThru_KWP_RxPack_Cater) referenced from passthru_kwp.o(i.PassThru_KWP_InitPort)
 <LI><a href="#[6c]">PassThru_KWP_RxPack_DirectRead</a> from passthru_kwp.o(i.PassThru_KWP_RxPack_DirectRead) referenced from passthru_iso.o(i.PassThru_ISO_InitPort)
 <LI><a href="#[6c]">PassThru_KWP_RxPack_DirectRead</a> from passthru_kwp.o(i.PassThru_KWP_RxPack_DirectRead) referenced from passthru_kwp.o(i.PassThru_KWP_InitPort)
 <LI><a href="#[6b]">PassThru_KWP_RxPack_Interception</a> from passthru_kwp.o(i.PassThru_KWP_RxPack_Interception) referenced from passthru_iso.o(i.PassThru_ISO_InitPort)
 <LI><a href="#[6b]">PassThru_KWP_RxPack_Interception</a> from passthru_kwp.o(i.PassThru_KWP_RxPack_Interception) referenced from passthru_kwp.o(i.PassThru_KWP_InitPort)
 <LI><a href="#[79]">PassThru_KWP_RxPack_J1708MID</a> from passthru_kwp.o(i.PassThru_KWP_RxPack_J1708MID) referenced from passthru_kwp.o(i.PassThru_KWP_InitPort)
 <LI><a href="#[6e]">PassThru_KWP_RxPack_Kwp2000</a> from passthru_kwp.o(i.PassThru_KWP_RxPack_Kwp2000) referenced from passthru_iso.o(i.PassThru_ISO_Init_Slow)
 <LI><a href="#[6e]">PassThru_KWP_RxPack_Kwp2000</a> from passthru_kwp.o(i.PassThru_KWP_RxPack_Kwp2000) referenced from passthru_kwp.o(i.PassThru_KWP_InitPort)
 <LI><a href="#[73]">PassThru_KWP_RxPack_Length</a> from passthru_kwp.o(i.PassThru_KWP_RxPack_Length) referenced from passthru_kwp.o(i.PassThru_KWP_InitPort)
 <LI><a href="#[7b]">PassThru_KWP_RxPack_Length3</a> from passthru_kwp.o(i.PassThru_KWP_RxPack_Length3) referenced from passthru_kwp.o(i.PassThru_KWP_InitPort)
 <LI><a href="#[7a]">PassThru_KWP_RxPack_MazdaKWP</a> from passthru_kwp.o(i.PassThru_KWP_RxPack_MazdaKWP) referenced from passthru_kwp.o(i.PassThru_KWP_InitPort)
 <LI><a href="#[75]">PassThru_KWP_RxPack_Mitsub</a> from passthru_kwp.o(i.PassThru_KWP_RxPack_Mitsub) referenced from passthru_kwp.o(i.PassThru_KWP_InitPort)
 <LI><a href="#[74]">PassThru_KWP_RxPack_Nissan</a> from passthru_kwp.o(i.PassThru_KWP_RxPack_Nissan) referenced from passthru_kwp.o(i.PassThru_KWP_InitPort)
 <LI><a href="#[71]">PassThru_KWP_RxPack_Normal</a> from passthru_kwp.o(i.PassThru_KWP_RxPack_Normal) referenced from passthru_kwp.o(i.PassThru_KWP_InitPort)
 <LI><a href="#[76]">PassThru_KWP_RxPack_Volvo</a> from passthru_kwp.o(i.PassThru_KWP_RxPack_Volvo) referenced from passthru_kwp.o(i.PassThru_KWP_InitPort)
 <LI><a href="#[ad]">PassThru_KWP_SetConfig</a> from passthru_kwp.o(i.PassThru_KWP_SetConfig) referenced from mmain.o(.constdata)
 <LI><a href="#[70]">PassThru_KWP_TxPack_Delay</a> from passthru_kwp.o(i.PassThru_KWP_TxPack_Delay) referenced from passthru_kwp.o(i.PassThru_KWP_InitPort)
 <LI><a href="#[6d]">PassThru_KWP_TxPack_Normal</a> from passthru_kwp.o(i.PassThru_KWP_TxPack_Normal) referenced from passthru_iso.o(i.PassThru_ISO_Init_Slow)
 <LI><a href="#[6d]">PassThru_KWP_TxPack_Normal</a> from passthru_kwp.o(i.PassThru_KWP_TxPack_Normal) referenced from passthru_kwp.o(i.PassThru_KWP_InitPort)
 <LI><a href="#[77]">PassThru_KWP_TxPack_Volvo</a> from passthru_kwp.o(i.PassThru_KWP_TxPack_Volvo) referenced from passthru_kwp.o(i.PassThru_KWP_InitPort)
 <LI><a href="#[b4]">PassThru_PLUSE_InitPort</a> from passthru_pluse.o(i.PassThru_PLUSE_InitPort) referenced from mmain.o(.constdata)
 <LI><a href="#[7f]">PassThru_PLUSE_ReadCodeByte</a> from passthru_pluse.o(i.PassThru_PLUSE_ReadCodeByte) referenced from passthru_pluse.o(i.PassThru_PLUSE_InitPort)
 <LI><a href="#[7d]">PassThru_PLUSE_ReadDataStream</a> from passthru_pluse.o(i.PassThru_PLUSE_ReadDataStream) referenced from passthru_pluse.o(i.PassThru_PLUSE_InitPort)
 <LI><a href="#[7c]">PassThru_PLUSE_SendCodeByte</a> from passthru_pluse.o(i.PassThru_PLUSE_SendCodeByte) referenced from passthru_pluse.o(i.PassThru_PLUSE_InitPort)
 <LI><a href="#[80]">PassThru_PLUSE_SendCodeBytes</a> from passthru_pluse.o(i.PassThru_PLUSE_SendCodeBytes) referenced from passthru_pluse.o(i.PassThru_PLUSE_InitPort)
 <LI><a href="#[7e]">PassThru_PLUSE_SendDataStream</a> from passthru_pluse.o(i.PassThru_PLUSE_SendDataStream) referenced from passthru_pluse.o(i.PassThru_PLUSE_InitPort)
 <LI><a href="#[b3]">PassThru_PLUSE_SetConfig</a> from passthru_pluse.o(i.PassThru_PLUSE_SetConfig) referenced from mmain.o(.constdata)
 <LI><a href="#[ac]">PassThru_PWM_InitPort</a> from passthru_pwm.o(i.PassThru_PWM_InitPort) referenced from mmain.o(.constdata)
 <LI><a href="#[82]">PassThru_PWM_RxPack_Normal</a> from passthru_pwm.o(i.PassThru_PWM_RxPack_Normal) referenced from passthru_pwm.o(i.PassThru_PWM_InitPort)
 <LI><a href="#[ab]">PassThru_PWM_SetConfig</a> from passthru_pwm.o(i.PassThru_PWM_SetConfig) referenced from mmain.o(.constdata)
 <LI><a href="#[81]">PassThru_PWM_TxPack_Normal</a> from passthru_pwm.o(i.PassThru_PWM_TxPack_Normal) referenced from passthru_pwm.o(i.PassThru_PWM_InitPort)
 <LI><a href="#[aa]">PassThru_VPW_InitPort</a> from passthru_vpw.o(i.PassThru_VPW_InitPort) referenced from mmain.o(.constdata)
 <LI><a href="#[9f]">PassThru_VPW_RxPack_Normal</a> from passthru_vpw.o(i.PassThru_VPW_RxPack_Normal) referenced from passthru_vpw.o(i.PassThru_VPW_InitPort)
 <LI><a href="#[a9]">PassThru_VPW_SetConfig</a> from passthru_vpw.o(i.PassThru_VPW_SetConfig) referenced from mmain.o(.constdata)
 <LI><a href="#[9e]">PassThru_VPW_TxPack_Normal</a> from passthru_vpw.o(i.PassThru_VPW_TxPack_Normal) referenced from passthru_vpw.o(i.PassThru_VPW_InitPort)
 <LI><a href="#[b6]">PassThru_WAVE_InitPort</a> from passthru_wave.o(i.PassThru_WAVE_InitPort) referenced from mmain.o(.constdata)
 <LI><a href="#[a0]">PassThru_WAVE_ReadWave</a> from passthru_wave.o(i.PassThru_WAVE_ReadWave) referenced from passthru_wave.o(i.PassThru_WAVE_InitPort)
 <LI><a href="#[b5]">PassThru_WAVE_SetConfig</a> from passthru_wave.o(i.PassThru_WAVE_SetConfig) referenced from mmain.o(.constdata)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f2xx_it.o(i.PendSV_Handler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f2xx_it.o(i.SVC_Handler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5e]">SoftUartRxByte</a> from newsoftuart.o(i.SoftUartRxByte) referenced from passthru_benz.o(i.PassThru_BENZ_InitPort)
 <LI><a href="#[5e]">SoftUartRxByte</a> from newsoftuart.o(i.SoftUartRxByte) referenced from passthru_iso.o(i.PassThru_ISO_InitPort)
 <LI><a href="#[5e]">SoftUartRxByte</a> from newsoftuart.o(i.SoftUartRxByte) referenced from passthru_kwp.o(i.PassThru_KWP_InitPort)
 <LI><a href="#[5e]">SoftUartRxByte</a> from newsoftuart.o(i.SoftUartRxByte) referenced from passthru_pluse.o(i.PassThru_PLUSE_InitPort)
 <LI><a href="#[5e]">SoftUartRxByte</a> from newsoftuart.o(i.SoftUartRxByte) referenced from hardware.o(i.Set_DrvPort)
 <LI><a href="#[5e]">SoftUartRxByte</a> from newsoftuart.o(i.SoftUartRxByte) referenced from mmain.o(i._SysFunc)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f2xx_it.o(i.SysTick_Handler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5c]">SystemInit</a> from system_stm32f2xx.o(i.SystemInit) referenced from startup_stm32f2xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[51]">USART6_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f2xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5f]">_SoftTxByte</a> from newsoftuart.o(i._SoftTxByte) referenced from passthru_benz.o(i.PassThru_BENZ_InitPort)
 <LI><a href="#[5f]">_SoftTxByte</a> from newsoftuart.o(i._SoftTxByte) referenced from passthru_iso.o(i.PassThru_ISO_InitPort)
 <LI><a href="#[5f]">_SoftTxByte</a> from newsoftuart.o(i._SoftTxByte) referenced from passthru_kwp.o(i.PassThru_KWP_InitPort)
 <LI><a href="#[5f]">_SoftTxByte</a> from newsoftuart.o(i._SoftTxByte) referenced from passthru_pluse.o(i.PassThru_PLUSE_InitPort)
 <LI><a href="#[5f]">_SoftTxByte</a> from newsoftuart.o(i._SoftTxByte) referenced from hardware.o(i.Set_DrvPort)
 <LI><a href="#[5f]">_SoftTxByte</a> from newsoftuart.o(i._SoftTxByte) referenced from mmain.o(i._SysFunc)
 <LI><a href="#[a1]">_SoftTxByte2</a> from newsoftuart.o(i._SoftTxByte2) referenced from hardware.o(i.Set_DrvPort)
 <LI><a href="#[5d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f2xx.o(.text)
 <LI><a href="#[a5]">fputc</a> from fputc.o(i.fputc) referenced from printf1.o(i.__0printf$1)
 <LI><a href="#[5b]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(.text)
</UL>
<P><STRONG><a name="[1a1]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[b7]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c4]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1a2]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1a3]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1a4]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1a5]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1a6]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[175]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Ver
</UL>

<P><STRONG><a name="[174]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Ver
</UL>

<P><STRONG><a name="[dd]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_data
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Pass
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_USART1_RxFlag
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack_DelCanID
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePackMultiple
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_NotID_Flash
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_Normal_Multiple
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_Auto_GM
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_Auto_Ext
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_Auto
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_Head
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluecmdsend
</UL>

<P><STRONG><a name="[133]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_SELFTEST
</UL>

<P><STRONG><a name="[1a7]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANx_MultiFilterMask_PGN
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_J1939_SendOnly
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_J1939
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1a8]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_data
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmain
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Pass
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePackMultiple
</UL>

<P><STRONG><a name="[12f]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_All_IO
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmain
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_Normal_Multiple
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_J1939_SendPGN
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_Normal_Multiple
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluecmdsend
</UL>

<P><STRONG><a name="[1aa]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[bc]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCompV
</UL>

<P><STRONG><a name="[be]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCompV
</UL>

<P><STRONG><a name="[c0]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCompV
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCompV
</UL>

<P><STRONG><a name="[1ab]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c2]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1ac]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[bd]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[b8]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1ae]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1af]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, semi.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>__I$use$semihosting$fputc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusesemip.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>ADC1_Init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, adc.o(i.ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ADC1_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_minivci_app
</UL>

<P><STRONG><a name="[19b]"></a>ALL_GPIO_Config</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hardware.o(i.ALL_GPIO_Config))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_minivci_app
</UL>

<P><STRONG><a name="[a4]"></a>ALL_KEEP_COM</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, passthru.o(i.ALL_KEEP_COM))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ALL_KEEP_COM &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunWithWait
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNus
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAddresses32
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmain.o(i.SpecialFun)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[cc]"></a>CAN1_Config</STRONG> (Thumb, 200 bytes, Stack size 72 bytes, can.o(i.CAN1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = CAN1_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_StructInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_minivci_app
</UL>

<P><STRONG><a name="[cf]"></a>CAN_DeInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f2xx_can.o(i.CAN_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Config
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANx_ResetBaudRate
</UL>

<P><STRONG><a name="[d2]"></a>CAN_FilterInit</STRONG> (Thumb, 190 bytes, Stack size 20 bytes, stm32f2xx_can.o(i.CAN_FilterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CAN_FilterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Config
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANx_ResetFilterMask
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANx_MultiFilterMask_PGN
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANx_MultiFilterMask
</UL>

<P><STRONG><a name="[d7]"></a>CAN_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_can.o(i.CAN_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANx_ResetFilterMask
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANx_MultiFilterMask_PGN
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANx_MultiFilterMask
</UL>

<P><STRONG><a name="[d1]"></a>CAN_Init</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, stm32f2xx_can.o(i.CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Config
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANx_ResetBaudRate
</UL>

<P><STRONG><a name="[d0]"></a>CAN_StructInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f2xx_can.o(i.CAN_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Config
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANx_ResetBaudRate
</UL>

<P><STRONG><a name="[d5]"></a>CAN_Transmit</STRONG> (Thumb, 152 bytes, Stack size 12 bytes, stm32f2xx_can.o(i.CAN_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TxData
</UL>

<P><STRONG><a name="[d4]"></a>CAN_TxData</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, can.o(i.CAN_TxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CAN_TxData &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_flash_read_pos
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_flash_read
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_NotID_Flash
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_NotID
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_Normal
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_J1939_SendPGN
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_J1939_SendOnly
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_J1939
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_Head
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_GetID
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_FlowControl
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_Auto_GM
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_Auto_Ext
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_Auto
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_J1939
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_PGN_TxPack
</UL>

<P><STRONG><a name="[d6]"></a>CANx_MultiFilterMask</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, can.o(i.CANx_MultiFilterMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CANx_MultiFilterMask &rArr; CAN_FilterInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ITConfig
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_SetFilter
</UL>

<P><STRONG><a name="[d8]"></a>CANx_MultiFilterMask_PGN</STRONG> (Thumb, 320 bytes, Stack size 136 bytes, can.o(i.CANx_MultiFilterMask_PGN))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = CANx_MultiFilterMask_PGN &rArr; CAN_FilterInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ITConfig
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTAnswerErr
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_J1939_SendPGN
</UL>

<P><STRONG><a name="[da]"></a>CANx_ResetBaudRate</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, can.o(i.CANx_ResetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CANx_ResetBaudRate &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_StructInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_InitPort
</UL>

<P><STRONG><a name="[db]"></a>CANx_ResetFilterMask</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, can.o(i.CANx_ResetFilterMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CANx_ResetFilterMask &rArr; CAN_FilterInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ITConfig
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_InitPort
</UL>

<P><STRONG><a name="[dc]"></a>Check_USART1_RxFlag</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, mmain.o(i.Check_USART1_RxFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Check_USART1_RxFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MainRoute
</UL>

<P><STRONG><a name="[de]"></a>Circle_test</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, selftest.o(i.Circle_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Circle_test &rArr; SetLine_ext &rArr; tx_rx_mode_change &rArr; tx_c_channel &rArr; tx_spi_one_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_LINE_STATUS
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLine_ext
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Dac
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_down_test
</UL>

<P><STRONG><a name="[e2]"></a>Cmp_Test</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, selftest.o(i.Cmp_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Cmp_Test &rArr; Reset_All_IO &rArr; Reset_Line &rArr; SetEclk &rArr; tx_c_channel &rArr; tx_spi_one_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCompV
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_All_IO
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Dac
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[19c]"></a>Delay</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_minivci_app
</UL>

<P><STRONG><a name="[e5]"></a>DelayN_Count</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, time.o(i.DelayN_Count))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DelayN_Count &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_time
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SoftTxByte2
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipNbit
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SoftTxByte
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftUartRxByte
</UL>

<P><STRONG><a name="[e7]"></a>DelayN_Count_Get_Logic_count</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, hardware.o(i.DelayN_Count_Get_Logic_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DelayN_Count_Get_Logic_count &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_time
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_LINE_STATUS
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_BENZ_RxPack_SimuEcu
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftUartRxByte
</UL>

<P><STRONG><a name="[e9]"></a>DelayN_Count_Get_Logic_fpclk_1000</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, hardware.o(i.DelayN_Count_Get_Logic_fpclk_1000))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DelayN_Count_Get_Logic_fpclk_1000 &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_time
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_LINE_STATUS
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectBaud
</UL>

<P><STRONG><a name="[c9]"></a>DelayNms</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, time.o(i.DelayNms))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DelayNms &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_time
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_BENZ_TxPack_WithRev
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimulateEcu5bps
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetExtCh
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDelayCounter
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayTxByte
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftPulse
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_down_test
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx164dat
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_kl_can
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nissan_pulse_test
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kl_setup
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kl_pulse
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPortStatus
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_pulse_width
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestShortCiruit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOpen_iobd
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOpenCiruit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxPort
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_WAVE_InitPort
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_VPW_InitPort
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PWM_InitPort
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PLUSE_InitPort
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_InitPort
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_ISO_InitPort
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_SELFTEST
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Test
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Test
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_KEEP_COM
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcc_drv_v
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Normal
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Nissan
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Mitsub
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Length
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_J1708MID
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Cater
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_Init_Slow
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_Init_Fast
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Kwp2000
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_ISO_RxPack_WABCO
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_ISO_RxPack_Normal
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_ISO_Init_Slow
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_flash_read_pos
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_NotID_Flash
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxMuchPack_DelayTime
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_test
</UL>

<P><STRONG><a name="[cb]"></a>DelayNus</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, time.o(i.DelayNus))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_time
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetExtCh
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLineMonitor
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayTxByte
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftPulse
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx164dat
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestShortCiruit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_InitPort
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_BENZ_InitPort
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_KEEP_COM
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_VPW_TxPack_Normal
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxMuchPack_DelayTime
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pulse_kl_test_time_us
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pulse_kl_test_time
</UL>

<P><STRONG><a name="[ea]"></a>DelayTxByte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, passthru.o(i.DelayTxByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DelayTxByte &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNus
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_BENZ_TxPack_Normal
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_BENZ_RxPack_WithSend
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_TxPack_TxData
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_ISO_TxPack_WABCO
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_ISO_TxPack_Normal
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_ISO_RxPack_WABCO
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_ISO_RxPack_Normal
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_ISO_Init_Slow
</UL>

<P><STRONG><a name="[eb]"></a>DetectBaud</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, newsoftuart.o(i.DetectBaud))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DetectBaud &rArr; DelayN_Count_Get_Logic_fpclk_1000 &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_time
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayN_Count_Get_Logic_fpclk_1000
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTAnswerErr
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_Init_Slow
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Interception
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_ISO_Init_Slow
</UL>

<P><STRONG><a name="[ee]"></a>Drv_Test</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, selftest.o(i.Drv_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Drv_Test &rArr; DelayNms &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVcc_Drv
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Dac
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
</UL>

<P><STRONG><a name="[19f]"></a>ErasePage</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, code.o(i.ErasePage))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_data
</UL>

<P><STRONG><a name="[f2]"></a>FLASH_GetStatus</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f2xx_flash.o(i.FLASH_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[150]"></a>FLASH_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_flash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramDatatoFlash
</UL>

<P><STRONG><a name="[f0]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f2xx_flash.o(i.FLASH_ProgramHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramDatatoFlash
</UL>

<P><STRONG><a name="[14f]"></a>FLASH_Unlock</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramDatatoFlash
</UL>

<P><STRONG><a name="[f1]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f2xx_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
</UL>

<P><STRONG><a name="[110]"></a>FSMC_NORSRAMCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(i.FSMC_NORSRAMCmd))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMCConfig
</UL>

<P><STRONG><a name="[10f]"></a>FSMC_NORSRAMInit</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f2xx_fsmc.o(i.FSMC_NORSRAMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FSMC_NORSRAMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMCConfig
</UL>

<P><STRONG><a name="[a6]"></a>GET_LINE_STATUS</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hardware.o(i.GET_LINE_STATUS))
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Bus_status
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_BENZ_RxPack_SimuEcu
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLineMonitor
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayN_Count_Get_Logic_fpclk_1000
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayN_Count_Get_Logic_count
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestShortCiruit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOpen_iobd
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOpenCiruit
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftUartRxByte
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PLUSE_ReadDataStream
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PLUSE_ReadCodeByte
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_Init_Slow
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_test
</UL>
<BR>[Address Reference Count : 3]<UL><LI> selftest.o(i.adjust_pulse_width)
<LI> selftest.o(i.kl_pulse)
<LI> selftest.o(i.nissan_pulse_test)
</UL>
<P><STRONG><a name="[c7]"></a>GPIO_Init</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, stm32f2xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlLinesConfig
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_LEDInit
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Config
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_UART_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANx_ResetBaudRate
</UL>

<P><STRONG><a name="[109]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f2xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlLinesConfig
</UL>

<P><STRONG><a name="[ec]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectBaud
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_LINE_STATUS
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx164dat
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPortStatus
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetP0status
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_WAVE_ReadWave
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_VPW_TxPack_Normal
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_VPW_RxPack_Normal
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_VPW_RxPack_Frame
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_VPW_ReadByte
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PWM_TxPack_Normal
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PWM_RxPack_Normal
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PWM_READ_ANSWER_BYTE
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PWM_RxPack_SingleFrame
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadPulseByte_SPD
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Normal
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Nissan
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Mitsub
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Length
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_J1708MID
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Cater
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Kwp2000
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_ISO_RxPack_WABCO
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_ISO_RxPack_Normal
</UL>

<P><STRONG><a name="[115]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_minivci_app
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_DrvPort
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_spi_one_byte
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_PINSEL_channel
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetExtCh
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_LINE_STATUS_0_249600
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEclk
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_LINE_STATUS
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_c_channel
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx164dat
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kl_setup
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVcc_Drv
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Line
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PLUSE_InitPort
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_UARTSendByte
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Pass
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Another_STATUS
</UL>

<P><STRONG><a name="[113]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_spi_one_byte
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_PINSEL_channel
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_LINE_STATUS
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_c_channel
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx164dat
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestShortCiruit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOpen_iobd
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOpenCiruit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVcc_Drv
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Line
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PLUSE_InitPort
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_UARTSendByte
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Pass
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Another_STATUS
</UL>

<P><STRONG><a name="[c8]"></a>GetAddresses32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, passthru.o(i.GetAddresses32))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_KEEP_COM
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Pass
</UL>

<P><STRONG><a name="[177]"></a>GetCrc160</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, code.o(i.GetCrc160))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetCrc160
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Ver
</UL>

<P><STRONG><a name="[f3]"></a>GetLineMonitor</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, passthru.o(i.GetLineMonitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GetLineMonitor &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNus
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_LINE_STATUS
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_BENZ_TxPack_WithRev
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_BENZ_TxPack_Normal
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_TxPack_Normal
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_ISO_TxPack_WABCO
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_ISO_TxPack_Normal
</UL>

<P><STRONG><a name="[f4]"></a>GetP0status</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, selftest.o(i.GetP0status))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GetP0status &rArr; UartTxQueuePack
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxPort
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
</UL>

<P><STRONG><a name="[f5]"></a>GetVer</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, code.o(i.GetVer))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GetVer &rArr; UartTxQueuePack
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Dac
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
</UL>

<P><STRONG><a name="[f6]"></a>Get_Bus_status</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hardware.o(i.Get_Bus_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_Bus_status
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_LINE_STATUS
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_DirectRead
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_BENZ_RxPack_WithSend
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_BENZ_RxPack_Normal
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Volvo
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Normal
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Nissan
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Mitsub
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_MazdaKWP
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Length3
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Length
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_J1708MID
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Cater
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Kwp2000
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Interception
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_ISO_RxPack_WABCO
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_ISO_RxPack_Normal
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[fd]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_iwdg.o(i.IWDG_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_WatchDog
</UL>

<P><STRONG><a name="[11a]"></a>IWDG_Feed</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, code.o(i.IWDG_Feed))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_minivci_app
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipNbit
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MainRoute
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLUSE_RxPack_Normal
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_J1939_SendPGN
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxData
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_PGN_TxPack
</UL>

<P><STRONG><a name="[fc]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_iwdg.o(i.IWDG_ReloadCounter))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_WatchDog
</UL>

<P><STRONG><a name="[fa]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_iwdg.o(i.IWDG_SetPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_WatchDog
</UL>

<P><STRONG><a name="[fb]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_iwdg.o(i.IWDG_SetReload))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_WatchDog
</UL>

<P><STRONG><a name="[f9]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_iwdg.o(i.IWDG_WriteAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_WatchDog
</UL>

<P><STRONG><a name="[f8]"></a>Init_WatchDog</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, code.o(i.Init_WatchDog))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Init_WatchDog
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_minivci_app
</UL>

<P><STRONG><a name="[e6]"></a>Int_time</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, time.o(i.Int_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_NVIC_Configuration
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTAnswerErr
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_div
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNus
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayN_Count_Get_Logic_fpclk_1000
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayN_Count_Get_Logic_count
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayN_Count
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectBaud
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kl_setup
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_pulse_width
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SoftTxByte
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftUartRxByte
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_SELFTEST
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_UARTGetByte
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_WAVE_ReadWave
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_VPW_TxPack_Normal
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_VPW_RxPack_Frame
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PWM_TxPack_Normal
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PWM_RxPack_SingleFrame
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadPulseByte_SPD
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_Init_Slow
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxData_Time
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pulse_kl_test_time_us
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pulse_kl_test_time
</UL>

<P><STRONG><a name="[105]"></a>LCD_Clear</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm322xg_eval_lcd.o(i.LCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_Clear &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[107]"></a>LCD_CtrlLinesConfig</STRONG> (Thumb, 292 bytes, Stack size 16 bytes, stm322xg_eval_lcd.o(i.LCD_CtrlLinesConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_CtrlLinesConfig &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM322xG_LCD_Init
</UL>

<P><STRONG><a name="[10a]"></a>LCD_DisplayChar</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm322xg_eval_lcd.o(i.LCD_DisplayChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_DisplayChar &rArr; LCD_DrawChar &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawChar
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
</UL>

<P><STRONG><a name="[10c]"></a>LCD_DisplayStringLine</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm322xg_eval_lcd.o(i.LCD_DisplayStringLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_DisplayStringLine &rArr; LCD_DisplayChar &rArr; LCD_DrawChar &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayChar
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10b]"></a>LCD_DrawChar</STRONG> (Thumb, 120 bytes, Stack size 28 bytes, stm322xg_eval_lcd.o(i.LCD_DrawChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_DrawChar &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayChar
</UL>

<P><STRONG><a name="[10d]"></a>LCD_FSMCConfig</STRONG> (Thumb, 88 bytes, Stack size 96 bytes, stm322xg_eval_lcd.o(i.LCD_FSMCConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = LCD_FSMCConfig &rArr; FSMC_NORSRAMInit
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB3PeriphClockCmd
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM322xG_LCD_Init
</UL>

<P><STRONG><a name="[195]"></a>LCD_GetFont</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm322xg_eval_lcd.o(i.LCD_GetFont))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[158]"></a>LCD_ReadReg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm322xg_eval_lcd.o(i.LCD_ReadReg))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM322xG_LCD_Init
</UL>

<P><STRONG><a name="[193]"></a>LCD_SetBackColor</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm322xg_eval_lcd.o(i.LCD_SetBackColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_SetBackColor
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[106]"></a>LCD_SetCursor</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, stm322xg_eval_lcd.o(i.LCD_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawChar
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[194]"></a>LCD_SetTextColor</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm322xg_eval_lcd.o(i.LCD_SetTextColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_SetTextColor
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[111]"></a>LCD_WriteReg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm322xg_eval_lcd.o(i.LCD_WriteReg))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM322xG_LCD_Init
</UL>

<P><STRONG><a name="[a2]"></a>MCU_UARTGetByte</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, mcu_uart.o(i.MCU_UARTGetByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MCU_UARTGetByte &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_time
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mmain.o(i._SysFunc)
<LI> hardware.o(i.Set_DrvPort)
</UL>
<P><STRONG><a name="[a3]"></a>MCU_UARTSendByte</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mcu_uart.o(i.MCU_UARTSendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MCU_UARTSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mmain.o(i._SysFunc)
<LI> hardware.o(i.Set_DrvPort)
</UL>
<P><STRONG><a name="[116]"></a>MCU_UART_Init</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, mcu_uart.o(i.MCU_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MCU_UART_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimulateEcu5bps
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_InitPort
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_ISO_InitPort
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Interception
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>NVIC_Init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_NVIC_Configuration
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Config
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANx_ResetBaudRate
</UL>

<P><STRONG><a name="[167]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_NVIC_Configuration
</UL>

<P><STRONG><a name="[198]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_minivci_app
</UL>

<P><STRONG><a name="[119]"></a>PLUSE_RxPack_Normal</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, passthru_pluse.o(i.PLUSE_RxPack_Normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PLUSE_RxPack_Normal &rArr; UartTxQueuePack
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEndmsCounter
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PLUSE_ReadDataStream
</UL>

<P><STRONG><a name="[b2]"></a>PassThru_BENZ_InitPort</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, passthru_benz.o(i.PassThru_BENZ_InitPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = PassThru_BENZ_InitPort &rArr; Set_DrvPort &rArr; Reset_Line &rArr; SetEclk &rArr; tx_c_channel &rArr; tx_spi_one_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_DrvPort
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCChannel
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetExtCh
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEcuLineLoadMode
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNus
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSoftUart
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCompV
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmain.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>PassThru_BENZ_SetConfig</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, passthru_benz.o(i.PassThru_BENZ_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PassThru_BENZ_SetConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmain.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>PassThru_CAN_InitPort</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, passthru_can.o(i.PassThru_CAN_InitPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = PassThru_CAN_InitPort &rArr; CANx_ResetBaudRate &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_c_channel
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANx_ResetFilterMask
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANx_ResetBaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_SELFTEST
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmain.o(.constdata)
</UL>
<P><STRONG><a name="[125]"></a>PassThru_CAN_PGN_TxPack</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, passthru_can.o(i.PassThru_CAN_PGN_TxPack))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = PassThru_CAN_PGN_TxPack &rArr; CAN_TxData &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTAnswerErr
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TxData
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_J1939_ReadPGN
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_J1939_SendPGN
</UL>

<P><STRONG><a name="[126]"></a>PassThru_CAN_RxData</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, passthru_can.o(i.PassThru_CAN_RxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PassThru_CAN_RxData
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Read
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isHasData
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_NotID
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_Normal_Multiple
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_Normal
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_J1939_ReadPGN
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_J1939_ReadOnly
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_J1939
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_Head
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_GetID
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_Auto_ReadOnly
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_Auto_GM
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_Auto_Ext
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_AutoExt_ReadOnly
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_Auto
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxData_Time
</UL>

<P><STRONG><a name="[129]"></a>PassThru_CAN_RxData_Time</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, passthru_can.o(i.PassThru_CAN_RxData_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PassThru_CAN_RxData_Time &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_time
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isHasData
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxData
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_flash_read_pos
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_flash_read
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_NotID_Flash
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_NotID
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_Normal
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_J1939
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_Auto_GM
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_Auto_Ext
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_Auto
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_NotID
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_Normal_Multiple
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_Normal
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_J1939_ReadOnly
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_J1939
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_Head
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_Auto_ReadOnly
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_Auto_GM
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_Auto_Ext
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_AutoExt_ReadOnly
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_Auto
</UL>

<P><STRONG><a name="[8a]"></a>PassThru_CAN_RxPack_Auto</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, passthru_can.o(i.PassThru_CAN_RxPack_Auto))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = PassThru_CAN_RxPack_Auto &rArr; PassThru_CAN_TxPack_FlowControl &rArr; PassThru_CAN_TxMuchPack_DelayTime &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_SetKeepComSwitch2
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_FlowControl
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxData_Time
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_can.o(i.PassThru_SET_EACH_FUN)
</UL>
<P><STRONG><a name="[92]"></a>PassThru_CAN_RxPack_AutoExt_ReadOnly</STRONG> (Thumb, 406 bytes, Stack size 56 bytes, passthru_can.o(i.PassThru_CAN_RxPack_AutoExt_ReadOnly))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = PassThru_CAN_RxPack_AutoExt_ReadOnly &rArr; PassThru_CAN_TxPack_FlowControl &rArr; PassThru_CAN_TxMuchPack_DelayTime &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_SetKeepComSwitch2
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMA_Send_ext
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PushByte
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_ClearQueue
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_FlowControl
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxData_Time
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_can.o(i.PassThru_SET_EACH_FUN)
</UL>
<P><STRONG><a name="[8b]"></a>PassThru_CAN_RxPack_Auto_Ext</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, passthru_can.o(i.PassThru_CAN_RxPack_Auto_Ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = PassThru_CAN_RxPack_Auto_Ext &rArr; PassThru_CAN_TxPack_FlowControl &rArr; PassThru_CAN_TxMuchPack_DelayTime &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_SetKeepComSwitch2
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_FlowControl
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxData_Time
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_can.o(i.PassThru_SET_EACH_FUN)
</UL>
<P><STRONG><a name="[98]"></a>PassThru_CAN_RxPack_Auto_GM</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, passthru_can.o(i.PassThru_CAN_RxPack_Auto_GM))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = PassThru_CAN_RxPack_Auto_GM &rArr; PassThru_CAN_TxPack_FlowControl &rArr; PassThru_CAN_TxMuchPack_DelayTime &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_SetKeepComSwitch2
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_FlowControl
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxData_Time
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_can.o(i.PassThru_SET_EACH_FUN)
</UL>
<P><STRONG><a name="[90]"></a>PassThru_CAN_RxPack_Auto_ReadOnly</STRONG> (Thumb, 404 bytes, Stack size 56 bytes, passthru_can.o(i.PassThru_CAN_RxPack_Auto_ReadOnly))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = PassThru_CAN_RxPack_Auto_ReadOnly &rArr; PassThru_CAN_TxPack_FlowControl &rArr; PassThru_CAN_TxMuchPack_DelayTime &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_SetKeepComSwitch2
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMA_Send_ext
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PushByte
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_ClearQueue
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_FlowControl
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxData_Time
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_can.o(i.PassThru_SET_EACH_FUN)
</UL>
<P><STRONG><a name="[86]"></a>PassThru_CAN_RxPack_GetID</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, passthru_can.o(i.PassThru_CAN_RxPack_GetID))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PassThru_CAN_RxPack_GetID &rArr; PassThru_CAN_RxData
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_can.o(i.PassThru_SET_EACH_FUN)
</UL>
<P><STRONG><a name="[94]"></a>PassThru_CAN_RxPack_Head</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, passthru_can.o(i.PassThru_CAN_RxPack_Head))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PassThru_CAN_RxPack_Head &rArr; PassThru_CAN_RxData_Time &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxData_Time
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxData
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_can.o(i.PassThru_SET_EACH_FUN)
</UL>
<P><STRONG><a name="[8e]"></a>PassThru_CAN_RxPack_J1939</STRONG> (Thumb, 792 bytes, Stack size 64 bytes, passthru_can.o(i.PassThru_CAN_RxPack_J1939))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = PassThru_CAN_RxPack_J1939 &rArr; PassThru_CAN_RxData_Time &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMA_Send_ext
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TxData
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxData_Time
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_can.o(i.PassThru_SET_EACH_FUN)
</UL>
<P><STRONG><a name="[8c]"></a>PassThru_CAN_RxPack_J1939_ReadOnly</STRONG> (Thumb, 744 bytes, Stack size 56 bytes, passthru_can.o(i.PassThru_CAN_RxPack_J1939_ReadOnly))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = PassThru_CAN_RxPack_J1939_ReadOnly &rArr; PassThru_CAN_RxData_Time &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMA_Send_ext
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxData_Time
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_can.o(i.PassThru_SET_EACH_FUN)
</UL>
<P><STRONG><a name="[96]"></a>PassThru_CAN_RxPack_J1939_ReadPGN</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, passthru_can.o(i.PassThru_CAN_RxPack_J1939_ReadPGN))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PassThru_CAN_RxPack_J1939_ReadPGN &rArr; PassThru_CAN_RxData
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isHasData
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxData
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_J1939_SendPGN
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_PGN_TxPack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_can.o(i.PassThru_SET_EACH_FUN)
</UL>
<P><STRONG><a name="[88]"></a>PassThru_CAN_RxPack_Normal</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, passthru_can.o(i.PassThru_CAN_RxPack_Normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = PassThru_CAN_RxPack_Normal &rArr; PassThru_CAN_TxPack_FlowControl &rArr; PassThru_CAN_TxMuchPack_DelayTime &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_SetKeepComSwitch2
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_FlowControl
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxData_Time
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_can.o(i.PassThru_SET_EACH_FUN)
</UL>
<P><STRONG><a name="[9c]"></a>PassThru_CAN_RxPack_Normal_Multiple</STRONG> (Thumb, 226 bytes, Stack size 4136 bytes, passthru_can.o(i.PassThru_CAN_RxPack_Normal_Multiple))
<BR><BR>[Stack]<UL><LI>Max Depth = 4232<LI>Call Chain = PassThru_CAN_RxPack_Normal_Multiple &rArr; PassThru_CAN_TxPack_FlowControl &rArr; PassThru_CAN_TxMuchPack_DelayTime &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_SetKeepComSwitch2
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePackMultiple
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_FlowControl
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxData_Time
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxData
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_can.o(i.PassThru_SET_EACH_FUN)
</UL>
<P><STRONG><a name="[83]"></a>PassThru_CAN_RxPack_NotID</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, passthru_can.o(i.PassThru_CAN_RxPack_NotID))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = PassThru_CAN_RxPack_NotID &rArr; PassThru_CAN_TxPack_FlowControl &rArr; PassThru_CAN_TxMuchPack_DelayTime &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_SetKeepComSwitch2
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack_DelCanID
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_FlowControl
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxData_Time
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_can.o(i.PassThru_SET_EACH_FUN)
</UL>
<P><STRONG><a name="[132]"></a>PassThru_CAN_SELFTEST</STRONG> (Thumb, 182 bytes, Stack size 104 bytes, selftest.o(i.PassThru_CAN_SELFTEST))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = PassThru_CAN_SELFTEST &rArr; PassThru_CAN_SetConfig &rArr; Reset_All_IO &rArr; Reset_Line &rArr; SetEclk &rArr; tx_c_channel &rArr; tx_spi_one_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_time
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTAnswerErr
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_SetConfig
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_InitPort
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_Normal
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Time
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
</UL>

<P><STRONG><a name="[a7]"></a>PassThru_CAN_SetConfig</STRONG> (Thumb, 846 bytes, Stack size 40 bytes, passthru_can.o(i.PassThru_CAN_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = PassThru_CAN_SetConfig &rArr; Reset_All_IO &rArr; Reset_Line &rArr; SetEclk &rArr; tx_c_channel &rArr; tx_spi_one_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCChannel
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_c_channel
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVcc_Drv
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLine_ext
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCompV
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_All_IO
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_SET_EACH_FUN
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_SELFTEST
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmain.o(.constdata)
</UL>
<P><STRONG><a name="[137]"></a>PassThru_CAN_TxMuchPack_DelayTime</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, passthru_can.o(i.PassThru_CAN_TxMuchPack_DelayTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PassThru_CAN_TxMuchPack_DelayTime &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNus
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_NotID
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_Normal
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_J1939_SendOnly
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_J1939
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_FlowControl
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_Auto_GM
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_Auto_Ext
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_Auto
</UL>

<P><STRONG><a name="[91]"></a>PassThru_CAN_TxPack_Auto</STRONG> (Thumb, 276 bytes, Stack size 56 bytes, passthru_can.o(i.PassThru_CAN_TxPack_Auto))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = PassThru_CAN_TxPack_Auto &rArr; PassThru_CAN_TxMuchPack_DelayTime &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TxData
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxMuchPack_DelayTime
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxData_Time
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_can.o(i.PassThru_SET_EACH_FUN)
</UL>
<P><STRONG><a name="[93]"></a>PassThru_CAN_TxPack_Auto_Ext</STRONG> (Thumb, 294 bytes, Stack size 88 bytes, passthru_can.o(i.PassThru_CAN_TxPack_Auto_Ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = PassThru_CAN_TxPack_Auto_Ext &rArr; PassThru_CAN_TxMuchPack_DelayTime &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TxData
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxMuchPack_DelayTime
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxData_Time
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_can.o(i.PassThru_SET_EACH_FUN)
</UL>
<P><STRONG><a name="[99]"></a>PassThru_CAN_TxPack_Auto_GM</STRONG> (Thumb, 292 bytes, Stack size 56 bytes, passthru_can.o(i.PassThru_CAN_TxPack_Auto_GM))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = PassThru_CAN_TxPack_Auto_GM &rArr; PassThru_CAN_TxMuchPack_DelayTime &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TxData
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxMuchPack_DelayTime
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxData_Time
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_can.o(i.PassThru_SET_EACH_FUN)
</UL>
<P><STRONG><a name="[12b]"></a>PassThru_CAN_TxPack_FlowControl</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, passthru_can.o(i.PassThru_CAN_TxPack_FlowControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PassThru_CAN_TxPack_FlowControl &rArr; PassThru_CAN_TxMuchPack_DelayTime &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TxData
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxMuchPack_DelayTime
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_NotID
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_Normal_Multiple
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_Normal
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_Auto_ReadOnly
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_Auto_GM
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_Auto_Ext
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_AutoExt_ReadOnly
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_Auto
</UL>

<P><STRONG><a name="[87]"></a>PassThru_CAN_TxPack_GetID</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, passthru_can.o(i.PassThru_CAN_TxPack_GetID))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = PassThru_CAN_TxPack_GetID &rArr; CAN_TxData &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TxData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_can.o(i.PassThru_SET_EACH_FUN)
</UL>
<P><STRONG><a name="[95]"></a>PassThru_CAN_TxPack_Head</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, passthru_can.o(i.PassThru_CAN_TxPack_Head))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = PassThru_CAN_TxPack_Head &rArr; CAN_TxData &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TxData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_can.o(i.PassThru_SET_EACH_FUN)
</UL>
<P><STRONG><a name="[8f]"></a>PassThru_CAN_TxPack_J1939</STRONG> (Thumb, 402 bytes, Stack size 88 bytes, passthru_can.o(i.PassThru_CAN_TxPack_J1939))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = PassThru_CAN_TxPack_J1939 &rArr; PassThru_CAN_TxPack_J1939_SendOnly &rArr; PassThru_CAN_TxMuchPack_DelayTime &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TxData
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_J1939_SendOnly
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxMuchPack_DelayTime
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxData_Time
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_can.o(i.PassThru_SET_EACH_FUN)
</UL>
<P><STRONG><a name="[8d]"></a>PassThru_CAN_TxPack_J1939_SendOnly</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, passthru_can.o(i.PassThru_CAN_TxPack_J1939_SendOnly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = PassThru_CAN_TxPack_J1939_SendOnly &rArr; PassThru_CAN_TxMuchPack_DelayTime &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TxData
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxMuchPack_DelayTime
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_J1939
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_can.o(i.PassThru_SET_EACH_FUN)
</UL>
<P><STRONG><a name="[97]"></a>PassThru_CAN_TxPack_J1939_SendPGN</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, passthru_can.o(i.PassThru_CAN_TxPack_J1939_SendPGN))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = PassThru_CAN_TxPack_J1939_SendPGN &rArr; CANx_MultiFilterMask_PGN &rArr; CAN_FilterInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANx_MultiFilterMask_PGN
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TxData
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_J1939_ReadPGN
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_PGN_TxPack
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_can.o(i.PassThru_SET_EACH_FUN)
</UL>
<P><STRONG><a name="[89]"></a>PassThru_CAN_TxPack_Normal</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, passthru_can.o(i.PassThru_CAN_TxPack_Normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = PassThru_CAN_TxPack_Normal &rArr; PassThru_CAN_TxMuchPack_DelayTime &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TxData
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxMuchPack_DelayTime
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxData_Time
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_SELFTEST
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_Normal_Multiple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_can.o(i.PassThru_SET_EACH_FUN)
</UL>
<P><STRONG><a name="[9d]"></a>PassThru_CAN_TxPack_Normal_Multiple</STRONG> (Thumb, 214 bytes, Stack size 4128 bytes, passthru_can.o(i.PassThru_CAN_TxPack_Normal_Multiple))
<BR><BR>[Stack]<UL><LI>Max Depth = 4240<LI>Call Chain = PassThru_CAN_TxPack_Normal_Multiple &rArr; PassThru_CAN_TxPack_Normal &rArr; PassThru_CAN_TxMuchPack_DelayTime &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_Normal
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_can.o(i.PassThru_SET_EACH_FUN)
</UL>
<P><STRONG><a name="[84]"></a>PassThru_CAN_TxPack_NotID</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, passthru_can.o(i.PassThru_CAN_TxPack_NotID))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = PassThru_CAN_TxPack_NotID &rArr; PassThru_CAN_TxMuchPack_DelayTime &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TxData
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxMuchPack_DelayTime
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxData_Time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_can.o(i.PassThru_SET_EACH_FUN)
</UL>
<P><STRONG><a name="[85]"></a>PassThru_CAN_TxPack_NotID_Flash</STRONG> (Thumb, 278 bytes, Stack size 48 bytes, passthru_can.o(i.PassThru_CAN_TxPack_NotID_Flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = PassThru_CAN_TxPack_NotID_Flash &rArr; PassThru_CAN_RxData_Time &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMA_Send_ext_1768
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTAnswerErr
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TxData
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxData_Time
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_can.o(i.PassThru_SET_EACH_FUN)
</UL>
<P><STRONG><a name="[139]"></a>PassThru_CAN_TxPack_SetFilter</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, passthru_can.o(i.PassThru_CAN_TxPack_SetFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = PassThru_CAN_TxPack_SetFilter &rArr; CANx_MultiFilterMask &rArr; CAN_FilterInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANx_MultiFilterMask
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Pass
</UL>

<P><STRONG><a name="[9a]"></a>PassThru_CAN_TxPack_flash_read</STRONG> (Thumb, 282 bytes, Stack size 48 bytes, passthru_can.o(i.PassThru_CAN_TxPack_flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = PassThru_CAN_TxPack_flash_read &rArr; PassThru_CAN_RxData_Time &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMA_Send_ext
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTAnswerErr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TxData
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxData_Time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_can.o(i.PassThru_SET_EACH_FUN)
</UL>
<P><STRONG><a name="[9b]"></a>PassThru_CAN_TxPack_flash_read_pos</STRONG> (Thumb, 508 bytes, Stack size 104 bytes, passthru_can.o(i.PassThru_CAN_TxPack_flash_read_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = PassThru_CAN_TxPack_flash_read_pos &rArr; PassThru_CAN_RxData_Time &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMA_Send_ext
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTAnswerErr
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TxData
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxData_Time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_can.o(i.PassThru_SET_EACH_FUN)
</UL>
<P><STRONG><a name="[153]"></a>PassThru_Default_SetConfig</STRONG> (Thumb, 150 bytes, Stack size 12 bytes, hardware.o(i.PassThru_Default_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PassThru_Default_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_All_IO
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmain
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
</UL>

<P><STRONG><a name="[b0]"></a>PassThru_ISO_InitPort</STRONG> (Thumb, 398 bytes, Stack size 32 bytes, passthru_iso.o(i.PassThru_ISO_InitPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = PassThru_ISO_InitPort &rArr; Set_DrvPort &rArr; Reset_Line &rArr; SetEclk &rArr; tx_c_channel &rArr; tx_spi_one_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_DrvPort
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCChannel
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_c_channel
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSoftUart
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLine_ext
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCompV
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_UART_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmain.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>PassThru_ISO_Init_Slow</STRONG> (Thumb, 606 bytes, Stack size 72 bytes, passthru_iso.o(i.PassThru_ISO_Init_Slow))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = PassThru_ISO_Init_Slow &rArr; DetectBaud &rArr; DelayN_Count_Get_Logic_fpclk_1000 &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_TxPack_TxData
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayTxByte
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectBaud
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SoftTxByte
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSoftUart
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_iso.o(i.PassThru_ISO_InitPort)
</UL>
<P><STRONG><a name="[68]"></a>PassThru_ISO_RxPack_Normal</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, passthru_iso.o(i.PassThru_ISO_RxPack_Normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = PassThru_ISO_RxPack_Normal &rArr; SimulateEcu5bps &rArr; MCU_UART_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Bus_status
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimulateEcu5bps
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEndmsCounter
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayTxByte
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftUartRxByte
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
</UL>
<BR>[Address Reference Count : 2]<UL><LI> passthru_iso.o(i.PassThru_ISO_InitPort)
<LI> passthru_iso.o(i.PassThru_ISO_Init_Slow)
</UL>
<P><STRONG><a name="[6a]"></a>PassThru_ISO_RxPack_WABCO</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, passthru_iso.o(i.PassThru_ISO_RxPack_WABCO))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = PassThru_ISO_RxPack_WABCO &rArr; SimulateEcu5bps &rArr; MCU_UART_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Bus_status
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimulateEcu5bps
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEndmsCounter
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayTxByte
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftUartRxByte
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
</UL>
<BR>[Address Reference Count : 2]<UL><LI> passthru_iso.o(i.PassThru_ISO_InitPort)
<LI> passthru_iso.o(i.PassThru_ISO_Init_Slow)
</UL>
<P><STRONG><a name="[af]"></a>PassThru_ISO_SetConfig</STRONG> (Thumb, 396 bytes, Stack size 20 bytes, passthru_iso.o(i.PassThru_ISO_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PassThru_ISO_SetConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmain.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>PassThru_ISO_TxPack_Normal</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, passthru_iso.o(i.PassThru_ISO_TxPack_Normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = PassThru_ISO_TxPack_Normal &rArr; GetLineMonitor &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEndmsCounter
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDelayCounter
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLineMonitor
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayTxByte
</UL>
<BR>[Address Reference Count : 2]<UL><LI> passthru_iso.o(i.PassThru_ISO_InitPort)
<LI> passthru_iso.o(i.PassThru_ISO_Init_Slow)
</UL>
<P><STRONG><a name="[69]"></a>PassThru_ISO_TxPack_WABCO</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, passthru_iso.o(i.PassThru_ISO_TxPack_WABCO))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = PassThru_ISO_TxPack_WABCO &rArr; GetLineMonitor &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEndmsCounter
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDelayCounter
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLineMonitor
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayTxByte
</UL>
<BR>[Address Reference Count : 2]<UL><LI> passthru_iso.o(i.PassThru_ISO_InitPort)
<LI> passthru_iso.o(i.PassThru_ISO_Init_Slow)
</UL>
<P><STRONG><a name="[ae]"></a>PassThru_KWP_InitPort</STRONG> (Thumb, 596 bytes, Stack size 40 bytes, passthru_kwp.o(i.PassThru_KWP_InitPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = PassThru_KWP_InitPort &rArr; Set_DrvPort &rArr; Reset_Line &rArr; SetEclk &rArr; tx_c_channel &rArr; tx_spi_one_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_DrvPort
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCChannel
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetExtCh
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNus
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEclk
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSoftUart
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLine_ext
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCompV
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_UART_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_nisan_pwm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmain.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>PassThru_KWP_Init_Fast</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, passthru_kwp.o(i.PassThru_KWP_Init_Fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PassThru_KWP_Init_Fast &rArr; PassThru_KWP_TxPack_TxData &rArr; DelayTxByte &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_TxPack_TxData
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftPulse
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSoftUart
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Another_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_kwp.o(i.PassThru_KWP_InitPort)
</UL>
<P><STRONG><a name="[72]"></a>PassThru_KWP_Init_Slow</STRONG> (Thumb, 594 bytes, Stack size 72 bytes, passthru_kwp.o(i.PassThru_KWP_Init_Slow))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = PassThru_KWP_Init_Slow &rArr; DetectBaud &rArr; DelayN_Count_Get_Logic_fpclk_1000 &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEndmsCounter
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_time
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectBaud
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_LINE_STATUS
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SoftTxByte
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSoftUart
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Another_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_kwp.o(i.PassThru_KWP_InitPort)
</UL>
<P><STRONG><a name="[78]"></a>PassThru_KWP_RxPack_Cater</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, passthru_kwp.o(i.PassThru_KWP_RxPack_Cater))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = PassThru_KWP_RxPack_Cater &rArr; SoftUartRxByte &rArr; DelayN_Count_Get_Logic_count &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Bus_status
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEndmsCounter
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftUartRxByte
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_kwp.o(i.PassThru_KWP_InitPort)
</UL>
<P><STRONG><a name="[6c]"></a>PassThru_KWP_RxPack_DirectRead</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, passthru_kwp.o(i.PassThru_KWP_RxPack_DirectRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PassThru_KWP_RxPack_DirectRead &rArr; SoftUartRxByte &rArr; DelayN_Count_Get_Logic_count &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendByte
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Bus_status
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftUartRxByte
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_BENZ_RxPack_DirectRead
</UL>
<BR>[Address Reference Count : 2]<UL><LI> passthru_kwp.o(i.PassThru_KWP_InitPort)
<LI> passthru_iso.o(i.PassThru_ISO_InitPort)
</UL>
<P><STRONG><a name="[6b]"></a>PassThru_KWP_RxPack_Interception</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, passthru_kwp.o(i.PassThru_KWP_RxPack_Interception))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = PassThru_KWP_RxPack_Interception &rArr; PassThru_KWP_RxPack_Normal &rArr; SimulateEcu5bps &rArr; MCU_UART_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Bus_status
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectBaud
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftUartRxByte
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSoftUart
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_UART_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Normal
</UL>
<BR>[Address Reference Count : 2]<UL><LI> passthru_kwp.o(i.PassThru_KWP_InitPort)
<LI> passthru_iso.o(i.PassThru_ISO_InitPort)
</UL>
<P><STRONG><a name="[79]"></a>PassThru_KWP_RxPack_J1708MID</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, passthru_kwp.o(i.PassThru_KWP_RxPack_J1708MID))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = PassThru_KWP_RxPack_J1708MID &rArr; SimulateEcu5bps &rArr; MCU_UART_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Bus_status
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimulateEcu5bps
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEndmsCounter
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftUartRxByte
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_kwp.o(i.PassThru_KWP_InitPort)
</UL>
<P><STRONG><a name="[6e]"></a>PassThru_KWP_RxPack_Kwp2000</STRONG> (Thumb, 420 bytes, Stack size 48 bytes, passthru_kwp.o(i.PassThru_KWP_RxPack_Kwp2000))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = PassThru_KWP_RxPack_Kwp2000 &rArr; SimulateEcu5bps &rArr; MCU_UART_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Bus_status
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimulateEcu5bps
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEndmsCounter
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_SetKeepComSwitch2
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftUartRxByte
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
</UL>
<BR>[Address Reference Count : 2]<UL><LI> passthru_kwp.o(i.PassThru_KWP_InitPort)
<LI> passthru_iso.o(i.PassThru_ISO_Init_Slow)
</UL>
<P><STRONG><a name="[73]"></a>PassThru_KWP_RxPack_Length</STRONG> (Thumb, 284 bytes, Stack size 48 bytes, passthru_kwp.o(i.PassThru_KWP_RxPack_Length))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = PassThru_KWP_RxPack_Length &rArr; SimulateEcu5bps &rArr; MCU_UART_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Bus_status
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimulateEcu5bps
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEndmsCounter
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftUartRxByte
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_kwp.o(i.PassThru_KWP_InitPort)
</UL>
<P><STRONG><a name="[7b]"></a>PassThru_KWP_RxPack_Length3</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, passthru_kwp.o(i.PassThru_KWP_RxPack_Length3))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PassThru_KWP_RxPack_Length3 &rArr; UartTxQueuePack
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Bus_status
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEndmsCounter
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_kwp.o(i.PassThru_KWP_InitPort)
</UL>
<P><STRONG><a name="[7a]"></a>PassThru_KWP_RxPack_MazdaKWP</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, passthru_kwp.o(i.PassThru_KWP_RxPack_MazdaKWP))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PassThru_KWP_RxPack_MazdaKWP &rArr; UartTxQueuePack
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Bus_status
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEndmsCounter
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_kwp.o(i.PassThru_KWP_InitPort)
</UL>
<P><STRONG><a name="[75]"></a>PassThru_KWP_RxPack_Mitsub</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, passthru_kwp.o(i.PassThru_KWP_RxPack_Mitsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = PassThru_KWP_RxPack_Mitsub &rArr; SimulateEcu5bps &rArr; MCU_UART_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Bus_status
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimulateEcu5bps
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEndmsCounter
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftUartRxByte
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_kwp.o(i.PassThru_KWP_InitPort)
</UL>
<P><STRONG><a name="[74]"></a>PassThru_KWP_RxPack_Nissan</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, passthru_kwp.o(i.PassThru_KWP_RxPack_Nissan))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = PassThru_KWP_RxPack_Nissan &rArr; SimulateEcu5bps &rArr; MCU_UART_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Bus_status
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimulateEcu5bps
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftUartRxByte
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_kwp.o(i.PassThru_KWP_InitPort)
</UL>
<P><STRONG><a name="[71]"></a>PassThru_KWP_RxPack_Normal</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, passthru_kwp.o(i.PassThru_KWP_RxPack_Normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = PassThru_KWP_RxPack_Normal &rArr; SimulateEcu5bps &rArr; MCU_UART_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Bus_status
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimulateEcu5bps
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEndmsCounter
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftUartRxByte
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Interception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_kwp.o(i.PassThru_KWP_InitPort)
</UL>
<P><STRONG><a name="[76]"></a>PassThru_KWP_RxPack_Volvo</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, passthru_kwp.o(i.PassThru_KWP_RxPack_Volvo))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PassThru_KWP_RxPack_Volvo &rArr; UartTxQueuePack
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Bus_status
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEndmsCounter
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_kwp.o(i.PassThru_KWP_InitPort)
</UL>
<P><STRONG><a name="[ad]"></a>PassThru_KWP_SetConfig</STRONG> (Thumb, 424 bytes, Stack size 20 bytes, passthru_kwp.o(i.PassThru_KWP_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PassThru_KWP_SetConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmain.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>PassThru_KWP_TxPack_Delay</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, passthru_kwp.o(i.PassThru_KWP_TxPack_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = PassThru_KWP_TxPack_Delay &rArr; PassThru_KWP_TxPack_TxData &rArr; DelayTxByte &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_TxPack_TxData
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTAnswerErr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_kwp.o(i.PassThru_KWP_InitPort)
</UL>
<P><STRONG><a name="[6d]"></a>PassThru_KWP_TxPack_Normal</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, passthru_kwp.o(i.PassThru_KWP_TxPack_Normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PassThru_KWP_TxPack_Normal &rArr; PassThru_KWP_TxPack_TxData &rArr; DelayTxByte &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_TxPack_TxData
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDelayCounter
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLineMonitor
</UL>
<BR>[Address Reference Count : 2]<UL><LI> passthru_kwp.o(i.PassThru_KWP_InitPort)
<LI> passthru_iso.o(i.PassThru_ISO_Init_Slow)
</UL>
<P><STRONG><a name="[13a]"></a>PassThru_KWP_TxPack_TxData</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, passthru_kwp.o(i.PassThru_KWP_TxPack_TxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PassThru_KWP_TxPack_TxData &rArr; DelayTxByte &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEndmsCounter
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayTxByte
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimulateEcu5bps
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_TxPack_Volvo
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_TxPack_Delay
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_Init_Fast
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_TxPack_Normal
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_ISO_Init_Slow
</UL>

<P><STRONG><a name="[77]"></a>PassThru_KWP_TxPack_Volvo</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, passthru_kwp.o(i.PassThru_KWP_TxPack_Volvo))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = PassThru_KWP_TxPack_Volvo &rArr; PassThru_KWP_TxPack_TxData &rArr; DelayTxByte &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_TxPack_TxData
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTAnswerErr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_kwp.o(i.PassThru_KWP_InitPort)
</UL>
<P><STRONG><a name="[140]"></a>PassThru_KWP_delay_parse</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, passthru_kwp.o(i.PassThru_KWP_delay_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PassThru_KWP_delay_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSoftUart
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Pass
</UL>

<P><STRONG><a name="[141]"></a>PassThru_KWP_delay_sent</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, passthru_kwp.o(i.PassThru_KWP_delay_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PassThru_KWP_delay_sent
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSoftUart
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Pass
</UL>

<P><STRONG><a name="[b4]"></a>PassThru_PLUSE_InitPort</STRONG> (Thumb, 322 bytes, Stack size 24 bytes, passthru_pluse.o(i.PassThru_PLUSE_InitPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = PassThru_PLUSE_InitPort &rArr; Set_DrvPort &rArr; Reset_Line &rArr; SetEclk &rArr; tx_c_channel &rArr; tx_spi_one_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_DrvPort
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEcuLineLoadMode
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_c_channel
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSoftUart
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLine_ext
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCompV
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Fun
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_All_IO
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmain.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>PassThru_PLUSE_SetConfig</STRONG> (Thumb, 208 bytes, Stack size 12 bytes, passthru_pluse.o(i.PassThru_PLUSE_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PassThru_PLUSE_SetConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmain.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>PassThru_PWM_InitPort</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, passthru_pwm.o(i.PassThru_PWM_InitPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = PassThru_PWM_InitPort &rArr; Reset_Line &rArr; SetEclk &rArr; tx_c_channel &rArr; tx_spi_one_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_c_channel
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVcc_Drv
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLine_ext
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCompV
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Line
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmain.o(.constdata)
</UL>
<P><STRONG><a name="[147]"></a>PassThru_PWM_READ_ANSWER_BYTE</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, passthru_pwm.o(i.PassThru_PWM_READ_ANSWER_BYTE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PassThru_PWM_READ_ANSWER_BYTE
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PWM_TxPack_Normal
</UL>

<P><STRONG><a name="[82]"></a>PassThru_PWM_RxPack_Normal</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, passthru_pwm.o(i.PassThru_PWM_RxPack_Normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = PassThru_PWM_RxPack_Normal &rArr; PassThru_PWM_RxPack_SingleFrame &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PWM_RxPack_SingleFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_pwm.o(i.PassThru_PWM_InitPort)
</UL>
<P><STRONG><a name="[ab]"></a>PassThru_PWM_SetConfig</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, passthru_pwm.o(i.PassThru_PWM_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PassThru_PWM_SetConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmain.o(.constdata)
</UL>
<P><STRONG><a name="[14a]"></a>PassThru_PWM_TXBYTE</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, passthru_pwm.o(i.PassThru_PWM_TXBYTE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PassThru_PWM_TXBYTE
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_LINE_STATUS
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PWM_TxPack_Normal
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PWM_RxPack_SingleFrame
</UL>

<P><STRONG><a name="[81]"></a>PassThru_PWM_TxPack_Normal</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, passthru_pwm.o(i.PassThru_PWM_TxPack_Normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PassThru_PWM_TxPack_Normal &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_time
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_LINE_STATUS
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PWM_TXBYTE
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PWM_READ_ANSWER_BYTE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_pwm.o(i.PassThru_PWM_InitPort)
</UL>
<P><STRONG><a name="[136]"></a>PassThru_SET_EACH_FUN</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, passthru_can.o(i.PassThru_SET_EACH_FUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PassThru_SET_EACH_FUN
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_SetConfig
</UL>

<P><STRONG><a name="[12a]"></a>PassThru_SetKeepComSwitch2</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, passthru.o(i.PassThru_SetKeepComSwitch2))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Kwp2000
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_NotID
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_Normal_Multiple
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_Normal
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_Auto_ReadOnly
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_Auto_GM
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_Auto_Ext
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_AutoExt_ReadOnly
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_Auto
</UL>

<P><STRONG><a name="[aa]"></a>PassThru_VPW_InitPort</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, passthru_vpw.o(i.PassThru_VPW_InitPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = PassThru_VPW_InitPort &rArr; Reset_Line &rArr; SetEclk &rArr; tx_c_channel &rArr; tx_spi_one_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_c_channel
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVcc_Drv
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLine_ext
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCompV
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Line
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Fun
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmain.o(.constdata)
</UL>
<P><STRONG><a name="[14c]"></a>PassThru_VPW_ReadByte</STRONG> (Thumb, 274 bytes, Stack size 56 bytes, passthru_vpw.o(i.PassThru_VPW_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PassThru_VPW_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_VPW_RxPack_Frame
</UL>

<P><STRONG><a name="[14d]"></a>PassThru_VPW_RxPack_Frame</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, passthru_vpw.o(i.PassThru_VPW_RxPack_Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PassThru_VPW_RxPack_Frame &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_time
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_VPW_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_VPW_RxPack_Normal
</UL>

<P><STRONG><a name="[9f]"></a>PassThru_VPW_RxPack_Normal</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, passthru_vpw.o(i.PassThru_VPW_RxPack_Normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PassThru_VPW_RxPack_Normal &rArr; PassThru_VPW_RxPack_Frame &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_VPW_RxPack_Frame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_vpw.o(i.PassThru_VPW_InitPort)
</UL>
<P><STRONG><a name="[a9]"></a>PassThru_VPW_SetConfig</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, passthru_vpw.o(i.PassThru_VPW_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PassThru_VPW_SetConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmain.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>PassThru_VPW_TxPack_Normal</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, passthru_vpw.o(i.PassThru_VPW_TxPack_Normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PassThru_VPW_TxPack_Normal &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_time
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNus
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_LINE_STATUS
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_vpw.o(i.PassThru_VPW_InitPort)
</UL>
<P><STRONG><a name="[b6]"></a>PassThru_WAVE_InitPort</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, passthru_wave.o(i.PassThru_WAVE_InitPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = PassThru_WAVE_InitPort &rArr; Reset_Line &rArr; SetEclk &rArr; tx_c_channel &rArr; tx_spi_one_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLine_ext
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCompV
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Line
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmain.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>PassThru_WAVE_ReadWave</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, passthru_wave.o(i.PassThru_WAVE_ReadWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PassThru_WAVE_ReadWave &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_time
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_c_channel
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMA_Send_ext
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_wave.o(i.PassThru_WAVE_InitPort)
</UL>
<P><STRONG><a name="[b5]"></a>PassThru_WAVE_SetConfig</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, passthru_wave.o(i.PassThru_WAVE_SetConfig))
<BR>[Address Reference Count : 1]<UL><LI> mmain.o(.constdata)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[14e]"></a>ProgramDatatoFlash</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, code.o(i.ProgramDatatoFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ProgramDatatoFlash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Ver
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_data
</UL>

<P><STRONG><a name="[135]"></a>Queue_Init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, queue.o(i.Queue_Init))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_minivci_app
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_SetConfig
</UL>

<P><STRONG><a name="[128]"></a>Queue_Read</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, queue.o(i.Queue_Read))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxData
</UL>

<P><STRONG><a name="[108]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlLinesConfig
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_LEDInit
</UL>

<P><STRONG><a name="[10e]"></a>RCC_AHB3PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_AHB3PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMCConfig
</UL>

<P><STRONG><a name="[cd]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_time
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Config
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_UART_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANx_ResetBaudRate
</UL>

<P><STRONG><a name="[d3]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[c6]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Config
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_UART_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANx_ResetBaudRate
</UL>

<P><STRONG><a name="[169]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[172]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f2xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[e0]"></a>Read_Dac</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, adc.o(i.Read_Dac))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLine1Channel
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLine0Channel
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_kl_can
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kl_setup
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPortStatus
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLine_ext
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVer
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Test
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Test
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcc_drv_v
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_nisan_pwm
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_test
</UL>

<P><STRONG><a name="[151]"></a>Read_Ver</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, code.o(i.Read_Ver))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Read_Ver &rArr; UartTxQueuePack
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
</UL>

<P><STRONG><a name="[152]"></a>Read_bl_addr</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, code.o(i.Read_bl_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Read_bl_addr &rArr; UartTxQueuePack
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
</UL>

<P><STRONG><a name="[e3]"></a>Reset_All_IO</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, hardware.o(i.Reset_All_IO))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Reset_All_IO &rArr; Reset_Line &rArr; SetEclk &rArr; tx_c_channel &rArr; tx_spi_one_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Line
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_Default_SetConfig
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kl_setup
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kl_pulse
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PLUSE_InitPort
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_SetConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Test
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmain
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
</UL>

<P><STRONG><a name="[142]"></a>Reset_Fun</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, passthru.o(i.Reset_Fun))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_VPW_InitPort
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PLUSE_InitPort
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
</UL>

<P><STRONG><a name="[146]"></a>Reset_Line</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, hardware.o(i.Reset_Line))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Reset_Line &rArr; SetEclk &rArr; tx_c_channel &rArr; tx_spi_one_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_PINSEL_channel
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEclk
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_LINE_STATUS
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_c_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_DrvPort
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_All_IO
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_WAVE_InitPort
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_VPW_InitPort
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PWM_InitPort
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmain
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
</UL>

<P><STRONG><a name="[13f]"></a>SET_Another_STATUS</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hardware.o(i.SET_Another_STATUS))
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxPort
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_Init_Slow
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_Init_Fast
</UL>

<P><STRONG><a name="[14b]"></a>SET_LINE_STATUS</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hardware.o(i.SET_LINE_STATUS))
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftPulse
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_down_test
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kl_setup
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SoftTxByte
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestShortCiruit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOpen_iobd
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOpenCiruit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxPort
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Line
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_VPW_TxPack_Normal
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PWM_TxPack_Normal
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PWM_TXBYTE
</UL>

<P><STRONG><a name="[155]"></a>SET_LINE_STATUS_0_249600</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hardware.o(i.SET_LINE_STATUS_0_249600))
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SoftTxByte2
</UL>

<P><STRONG><a name="[17a]"></a>SET_LINE_STATUS_1_249600</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hardware.o(i.SET_LINE_STATUS_1_249600))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SoftTxByte2
</UL>

<P><STRONG><a name="[156]"></a>STM322xG_LCD_Init</STRONG> (Thumb, 1034 bytes, Stack size 40 bytes, stm322xg_eval_lcd.o(i.STM322xG_LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = STM322xG_LCD_Init &rArr; LCD_FSMCConfig &rArr; FSMC_NORSRAMInit
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMCConfig
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlLinesConfig
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[159]"></a>STM_EVAL_LEDInit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm322xg_eval.o(i.STM_EVAL_LEDInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = STM_EVAL_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[196]"></a>STM_EVAL_LEDOn</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm322xg_eval.o(i.STM_EVAL_LEDOn))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[13c]"></a>SendDelayCounter</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, passthru.o(i.SendDelayCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SendDelayCounter &rArr; DelayNms &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_TxPack_Normal
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_ISO_TxPack_WABCO
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_ISO_TxPack_Normal
</UL>

<P><STRONG><a name="[120]"></a>SetCChannel</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, hardware.o(i.SetCChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SetCChannel &rArr; tx_c_channel &rArr; tx_spi_one_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_c_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_DrvPort
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_down_test
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_kl_can
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nissan_pulse_test
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kl_setup
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kl_pulse
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestShortCiruit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOpen_iobd
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOpenCiruit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_InitPort
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_ISO_InitPort
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_SetConfig
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_BENZ_InitPort
</UL>

<P><STRONG><a name="[e4]"></a>SetCompV</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, pwm_output.o(i.SetCompV))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SetCompV &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Mode_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_minivci_app
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetExtCh
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_down_test
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nissan_pulse_test
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kl_setup
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kl_pulse
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestShortCiruit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOpen_iobd
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOpenCiruit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_WAVE_InitPort
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_VPW_InitPort
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PWM_InitPort
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PLUSE_InitPort
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_InitPort
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_ISO_InitPort
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_SetConfig
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_BENZ_InitPort
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Test
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmain
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
</UL>

<P><STRONG><a name="[13e]"></a>SetEclk</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, pwm_output.o(i.SetEclk))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SetEclk &rArr; tx_c_channel &rArr; tx_spi_one_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_c_channel
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_minivci_app
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nissan_pulse_test
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Line
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_InitPort
</UL>

<P><STRONG><a name="[121]"></a>SetEcuLineLoadMode</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, passthru.o(i.SetEcuLineLoadMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SetEcuLineLoadMode &rArr; tx_c_channel &rArr; tx_spi_one_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_c_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPortStatus
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPortStatus
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PLUSE_InitPort
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_BENZ_InitPort
</UL>

<P><STRONG><a name="[11b]"></a>SetEndmsCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, passthru.o(i.SetEndmsCounter))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_BENZ_TxPack_WithRev
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_BENZ_TxPack_Normal
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_BENZ_RxPack_WithSend
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_BENZ_RxPack_Normal
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_TxPack_TxData
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLUSE_RxPack_Normal
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Volvo
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Normal
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Mitsub
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_MazdaKWP
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Length3
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Length
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_J1708MID
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Cater
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_Init_Slow
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Kwp2000
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_ISO_TxPack_WABCO
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_ISO_TxPack_Normal
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_ISO_RxPack_WABCO
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_ISO_RxPack_Normal
</UL>

<P><STRONG><a name="[11e]"></a>SetExtCh</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, passthru.o(i.SetExtCh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SetExtCh &rArr; rx164dat &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLine1Channel
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLine0Channel
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNus
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_c_channel
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx164dat
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx164dat
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVcc_Drv
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLine_ext
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCompV
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_InitPort
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_BENZ_InitPort
</UL>

<P><STRONG><a name="[160]"></a>SetLine0Channel</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, hardware.o(i.SetLine0Channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SetLine0Channel &rArr; tx_PINSEL_channel &rArr; tx_spi_one_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_PINSEL_channel
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Dac
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetExtCh
</UL>

<P><STRONG><a name="[161]"></a>SetLine1Channel</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, hardware.o(i.SetLine1Channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SetLine1Channel &rArr; tx_PINSEL_channel &rArr; tx_spi_one_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_PINSEL_channel
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Dac
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetExtCh
</UL>

<P><STRONG><a name="[df]"></a>SetLine_ext</STRONG> (Thumb, 644 bytes, Stack size 24 bytes, hardware.o(i.SetLine_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SetLine_ext &rArr; tx_rx_mode_change &rArr; tx_c_channel &rArr; tx_spi_one_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_PINSEL_channel
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTAnswerErr
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Dac
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_rx_mode_change
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetExtCh
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_kl_can
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPortStatus
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nissan_pulse_test
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kl_setup
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPortStatus
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestShortCiruit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOpen_iobd
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOpenCiruit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_WAVE_InitPort
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_VPW_InitPort
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PWM_InitPort
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PLUSE_InitPort
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_InitPort
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_ISO_InitPort
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_SetConfig
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_nisan_pwm
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_test
</UL>

<P><STRONG><a name="[11d]"></a>SetSoftUart</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, newsoftuart.o(i.SetSoftUart))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimulateEcu5bps
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PLUSE_InitPort
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_delay_sent
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_delay_parse
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_InitPort
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_ISO_InitPort
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_BENZ_InitPort
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_Init_Slow
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_Init_Fast
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Interception
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_ISO_Init_Slow
</UL>

<P><STRONG><a name="[163]"></a>SetTxPort</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, selftest.o(i.SetTxPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SetTxPort &rArr; DelayNms &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_LINE_STATUS
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_c_channel
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetP0status
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Another_STATUS
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
</UL>

<P><STRONG><a name="[ef]"></a>SetVcc_Drv</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, passthru.o(i.SetVcc_Drv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetVcc_Drv
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_DrvPort
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetExtCh
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_down_test
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nissan_pulse_test
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kl_setup
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kl_pulse
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestShortCiruit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOpen_iobd
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOpenCiruit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_VPW_InitPort
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PWM_InitPort
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_SetConfig
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Test
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcc_drv_v
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
</UL>

<P><STRONG><a name="[11f]"></a>Set_DrvPort</STRONG> (Thumb, 1506 bytes, Stack size 56 bytes, hardware.o(i.Set_DrvPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Set_DrvPort &rArr; Reset_Line &rArr; SetEclk &rArr; tx_c_channel &rArr; tx_spi_one_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCChannel
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_c_channel
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVcc_Drv
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Line
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PLUSE_InitPort
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_InitPort
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_ISO_InitPort
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_BENZ_InitPort
</UL>

<P><STRONG><a name="[13b]"></a>SimulateEcu5bps</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, passthru.o(i.SimulateEcu5bps))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SimulateEcu5bps &rArr; MCU_UART_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_TxPack_TxData
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSoftUart
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_UART_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Normal
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Nissan
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Mitsub
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Length
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_J1708MID
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Kwp2000
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_ISO_RxPack_WABCO
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_ISO_RxPack_Normal
</UL>

<P><STRONG><a name="[144]"></a>SkipNbit</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, newsoftuart.o(i.SkipNbit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SkipNbit &rArr; DelayN_Count &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayN_Count
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PLUSE_ReadDataStream
</UL>

<P><STRONG><a name="[11c]"></a>SoftPulse</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, newsoftuart.o(i.SoftPulse))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SoftPulse &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNus
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_LINE_STATUS
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_BENZ_InitEcu
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TxBytePulse
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PLUSE_SendCodeBytes
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_Init_Fast
</UL>

<P><STRONG><a name="[5e]"></a>SoftUartRxByte</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, newsoftuart.o(i.SoftUartRxByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SoftUartRxByte &rArr; DelayN_Count_Get_Logic_count &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_time
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayN_Count_Get_Logic_count
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayN_Count
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_LINE_STATUS
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_DirectRead
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Normal
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Nissan
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Mitsub
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Length
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_J1708MID
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Cater
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Kwp2000
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Interception
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_ISO_RxPack_WABCO
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_ISO_RxPack_Normal
</UL>
<BR>[Address Reference Count : 6]<UL><LI> mmain.o(i._SysFunc)
<LI> passthru_kwp.o(i.PassThru_KWP_InitPort)
<LI> passthru_benz.o(i.PassThru_BENZ_InitPort)
<LI> passthru_pluse.o(i.PassThru_PLUSE_InitPort)
<LI> passthru_iso.o(i.PassThru_ISO_InitPort)
<LI> hardware.o(i.Set_DrvPort)
</UL>
<P><STRONG><a name="[134]"></a>Stop_Time</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, time.o(i.Stop_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Stop_Time
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kl_pulse
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_pulse_width
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_SELFTEST
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>SystemInit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, system_stm32f2xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_minivci_app
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(.text)
</UL>
<P><STRONG><a name="[15a]"></a>TIM1_Mode_Config</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, pwm_output.o(i.TIM1_Mode_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TIM1_Mode_Config &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCompV
</UL>

<P><STRONG><a name="[fe]"></a>TIM2_NVIC_Configuration</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, time.o(i.TIM2_NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_minivci_app
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_time
</UL>

<P><STRONG><a name="[168]"></a>TIM4_Mode_Config</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, pwm_output.o(i.TIM4_Mode_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TIM4_Mode_Config &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_minivci_app
</UL>

<P><STRONG><a name="[15d]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Mode_Config
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEclk
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Mode_Config
</UL>

<P><STRONG><a name="[102]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_time
</UL>

<P><STRONG><a name="[104]"></a>TIM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_time
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Mode_Config
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEclk
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Mode_Config
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Time
</UL>

<P><STRONG><a name="[166]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_CtrlPWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Mode_Config
</UL>

<P><STRONG><a name="[ff]"></a>TIM_DeInit</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, stm32f2xx_tim.o(i.TIM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_minivci_app
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_time
</UL>

<P><STRONG><a name="[e8]"></a>TIM_GetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_GetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayN_Count_Get_Logic_fpclk_1000
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayN_Count_Get_Logic_count
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectBaud
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_WAVE_ReadWave
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_VPW_TxPack_Normal
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_VPW_RxPack_Frame
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_VPW_ReadByte
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PWM_TxPack_Normal
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PWM_TXBYTE
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PWM_READ_ANSWER_BYTE
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PWM_RxPack_SingleFrame
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadPulseByte_SPD
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pulse_kl_test_time_us
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pulse_kl_test_time
</UL>

<P><STRONG><a name="[19e]"></a>TIM_GetPrescaler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_GetPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pulse_kl_test_time_us
</UL>

<P><STRONG><a name="[103]"></a>TIM_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_time
</UL>

<P><STRONG><a name="[15b]"></a>TIM_OC1Init</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, stm32f2xx_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Mode_Config
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEclk
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Mode_Config
</UL>

<P><STRONG><a name="[15c]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Mode_Config
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEclk
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Mode_Config
</UL>

<P><STRONG><a name="[16a]"></a>TIM_PWM_Init</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, pwm_output.o(i.TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TIM_PWM_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_minivci_app
</UL>

<P><STRONG><a name="[ed]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectBaud
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_VPW_TxPack_Normal
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_VPW_RxPack_Frame
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_VPW_ReadByte
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PWM_TxPack_Normal
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PWM_TXBYTE
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PWM_READ_ANSWER_BYTE
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PWM_RxPack_SingleFrame
</UL>

<P><STRONG><a name="[101]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, stm32f2xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_time
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Mode_Config
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEclk
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Mode_Config
</UL>

<P><STRONG><a name="[16b]"></a>TestOpenCiruit</STRONG> (Thumb, 798 bytes, Stack size 56 bytes, selftest.o(i.TestOpenCiruit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TestOpenCiruit &rArr; SetCompV &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCChannel
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_LINE_STATUS
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_LINE_STATUS
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_c_channel
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVcc_Drv
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLine_ext
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCompV
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
</UL>

<P><STRONG><a name="[16c]"></a>TestOpen_iobd</STRONG> (Thumb, 794 bytes, Stack size 56 bytes, selftest.o(i.TestOpen_iobd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TestOpen_iobd &rArr; SetCompV &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCChannel
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_LINE_STATUS
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_LINE_STATUS
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_c_channel
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVcc_Drv
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLine_ext
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCompV
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
</UL>

<P><STRONG><a name="[16d]"></a>TestShortCiruit</STRONG> (Thumb, 738 bytes, Stack size 72 bytes, selftest.o(i.TestShortCiruit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TestShortCiruit &rArr; SetCompV &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCChannel
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNus
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_LINE_STATUS
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_LINE_STATUS
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_c_channel
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVcc_Drv
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLine_ext
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCompV
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
</UL>

<P><STRONG><a name="[16e]"></a>Transmit_Pass</STRONG> (Thumb, 366 bytes, Stack size 32 bytes, mmain.o(i.Transmit_Pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = Transmit_Pass &rArr; _SysFunc &rArr; Write_Ver &rArr; ProgramDatatoFlash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTAnswerErr
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_delay_sent
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_delay_parse
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_SetFilter
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAddresses32
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetBusAndMode
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpecialFun
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MainRoute
</UL>

<P><STRONG><a name="[149]"></a>UARTAnswer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usart1.o(i.UARTAnswer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UARTAnswer &rArr; UartTxQueuePack
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetBusAndMode
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PWM_RxPack_SingleFrame
</UL>

<P><STRONG><a name="[d9]"></a>UARTAnswerErr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usart1.o(i.UARTAnswerErr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UARTAnswerErr &rArr; UartTxQueuePack
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_time
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectBaud
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kl_pulse
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr08_return
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLine_ext
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_SELFTEST
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Pass
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpecialFun
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_TxPack_Volvo
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_TxPack_Delay
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANx_MultiFilterMask_PGN
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_flash_read_pos
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_flash_read
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_NotID_Flash
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_PGN_TxPack
</UL>

<P><STRONG><a name="[12c]"></a>USART1_ClearQueue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usart1.o(i.USART1_ClearQueue))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_Auto_ReadOnly
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_AutoExt_ReadOnly
</UL>

<P><STRONG><a name="[171]"></a>USART1_ReceiveData</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usart1.o(i.USART1_ReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_ReceiveData
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Ver
</UL>

<P><STRONG><a name="[17c]"></a>USART_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
</UL>

<P><STRONG><a name="[118]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_UART_Init
</UL>

<P><STRONG><a name="[199]"></a>USART_Config</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart1.o(i.USART_Config))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_minivci_app
</UL>

<P><STRONG><a name="[12e]"></a>USART_DMA_Send_ext</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart1.o(i.USART_DMA_Send_ext))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_WAVE_ReadWave
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_flash_read_pos
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_flash_read
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_J1939_ReadOnly
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_J1939
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_Auto_ReadOnly
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_AutoExt_ReadOnly
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluecmdsend
</UL>

<P><STRONG><a name="[138]"></a>USART_DMA_Send_ext_1768</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart1.o(i.USART_DMA_Send_ext_1768))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_data
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_NotID_Flash
</UL>

<P><STRONG><a name="[19a]"></a>USART_DMA_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart1.o(i.USART_DMA_init))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_minivci_app
</UL>

<P><STRONG><a name="[f7]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Bus_status
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_UARTSendByte
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_UARTGetByte
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_ReceiveData
</UL>

<P><STRONG><a name="[17b]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f2xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
</UL>

<P><STRONG><a name="[117]"></a>USART_Init</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, stm32f2xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_UART_Init
</UL>

<P><STRONG><a name="[12d]"></a>USART_PushByte</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usart1.o(i.USART_PushByte))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_Auto_ReadOnly
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_AutoExt_ReadOnly
</UL>

<P><STRONG><a name="[112]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_UARTGetByte
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_ReceiveData
</UL>

<P><STRONG><a name="[122]"></a>USART_SendByte</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usart1.o(i.USART_SendByte))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_DirectRead
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_BENZ_RxPack_DirectRead
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Ver
</UL>

<P><STRONG><a name="[114]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_UARTSendByte
</UL>

<P><STRONG><a name="[e1]"></a>UartTxQueuePack</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, usart1.o(i.UartTxQueuePack))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UartTxQueuePack
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_BENZ_TxPack_WithRev
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_BENZ_RxPack_WithSend
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_BENZ_RxPack_SimuEcu
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_BENZ_RxPack_Normal
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimulateEcu5bps
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_kl_can
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nissan_pulse_test
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kl_setup
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPortStatus
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_vcc_test
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTAnswerErr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTAnswer
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestShortCiruit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOpen_iobd
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOpenCiruit
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_bl_addr
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Ver
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVer
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetP0status
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Test
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Test
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_VPW_RxPack_Normal
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PWM_RxPack_SingleFrame
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLUSE_RxPack_Normal
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PLUSE_ReadCodeByte
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Volvo
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Normal
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Nissan
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Mitsub
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_MazdaKWP
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Length3
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Length
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_J1708MID
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Cater
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_Init_Slow
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Kwp2000
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_Interception
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_ISO_RxPack_WABCO
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_ISO_RxPack_Normal
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_ISO_Init_Slow
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack_DelCanID
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_J1939_SendPGN
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_TxPack_J1939
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_Normal
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_J1939_ReadOnly
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_J1939
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_Head
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_GetID
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_Auto_ReadOnly
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_Auto_GM
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_Auto_Ext
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_AutoExt_ReadOnly
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_Auto
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_test
</UL>

<P><STRONG><a name="[130]"></a>UartTxQueuePackMultiple</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, usart1.o(i.UartTxQueuePackMultiple))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UartTxQueuePackMultiple
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_Normal_Multiple
</UL>

<P><STRONG><a name="[131]"></a>UartTxQueuePack_DelCanID</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usart1.o(i.UartTxQueuePack_DelCanID))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UartTxQueuePack_DelCanID &rArr; UartTxQueuePack
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_NotID
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[173]"></a>Write_Ver</STRONG> (Thumb, 266 bytes, Stack size 344 bytes, code.o(i.Write_Ver))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = Write_Ver &rArr; ProgramDatatoFlash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendByte
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramDatatoFlash
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_ReceiveData
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc160
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tea
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
</UL>

<P><STRONG><a name="[178]"></a>_MainRoute</STRONG> (Thumb, 212 bytes, Stack size 0 bytes, mmain.o(i._MainRoute))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = _MainRoute &rArr; Transmit_Pass &rArr; _SysFunc &rArr; Write_Ver &rArr; ProgramDatatoFlash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Pass
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_USART1_RxFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmain
</UL>

<P><STRONG><a name="[5f]"></a>_SoftTxByte</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, newsoftuart.o(i._SoftTxByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _SoftTxByte &rArr; DelayN_Count &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_time
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayN_Count
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Cal_parity
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_LINE_STATUS
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PLUSE_SendDataStream
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_Init_Slow
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_ISO_Init_Slow
</UL>
<BR>[Address Reference Count : 6]<UL><LI> mmain.o(i._SysFunc)
<LI> passthru_kwp.o(i.PassThru_KWP_InitPort)
<LI> passthru_benz.o(i.PassThru_BENZ_InitPort)
<LI> passthru_pluse.o(i.PassThru_PLUSE_InitPort)
<LI> passthru_iso.o(i.PassThru_ISO_InitPort)
<LI> hardware.o(i.Set_DrvPort)
</UL>
<P><STRONG><a name="[a1]"></a>_SoftTxByte2</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, newsoftuart.o(i._SoftTxByte2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _SoftTxByte2 &rArr; DelayN_Count &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_LINE_STATUS_1_249600
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_LINE_STATUS_0_249600
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayN_Count
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Cal_parity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardware.o(i.Set_DrvPort)
</UL>
<P><STRONG><a name="[188]"></a>__0printf$1</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1b2]"></a>__1printf$1</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1), UNUSED)

<P><STRONG><a name="[192]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b3]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1b4]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1b5]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[17d]"></a>addr08_return</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, code.o(i.addr08_return))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = addr08_return &rArr; UARTAnswerErr &rArr; UartTxQueuePack
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTAnswerErr
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
</UL>

<P><STRONG><a name="[186]"></a>adjust_pulse_width</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, selftest.o(i.adjust_pulse_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = adjust_pulse_width &rArr; pulse_kl_test_time &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_time
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Time
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pulse_kl_test_time
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
</UL>

<P><STRONG><a name="[18c]"></a>bluecmdsend</STRONG> (Thumb, 172 bytes, Stack size 360 bytes, bluewifi.o(i.bluecmdsend))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = bluecmdsend &rArr; cmd_calcchecksum
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMA_Send_ext
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_usb
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_calcchecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluepincmddatesend
</UL>

<P><STRONG><a name="[18f]"></a>bluepincmddatesend</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bluewifi.o(i.bluepincmddatesend))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = bluepincmddatesend &rArr; bluecmdsend &rArr; cmd_calcchecksum
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluecmdsend
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_minivci_app
</UL>

<P><STRONG><a name="[18d]"></a>cmd_calcchecksum</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bluewifi.o(i.cmd_calcchecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cmd_calcchecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluecmdsend
</UL>

<P><STRONG><a name="[187]"></a>drv_vcc_test</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, selftest.o(i.drv_vcc_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = drv_vcc_test &rArr; vcc_drv_v &rArr; DelayNms &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcc_drv_v
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
</UL>

<P><STRONG><a name="[a5]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0printf$1)
</UL>
<P><STRONG><a name="[180]"></a>getPortStatus</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, selftest.o(i.getPortStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = getPortStatus &rArr; SetLine_ext &rArr; tx_rx_mode_change &rArr; tx_c_channel &rArr; tx_spi_one_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEcuLineLoadMode
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_c_channel
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLine_ext
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Dac
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
</UL>

<P><STRONG><a name="[127]"></a>isHasData</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, passthru_can.o(i.isHasData))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxPack_J1939_ReadPGN
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxData_Time
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_RxData
</UL>

<P><STRONG><a name="[185]"></a>kl_pulse</STRONG> (Thumb, 740 bytes, Stack size 32 bytes, selftest.o(i.kl_pulse))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = kl_pulse &rArr; Reset_All_IO &rArr; Reset_Line &rArr; SetEclk &rArr; tx_c_channel &rArr; tx_spi_one_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCChannel
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_c_channel
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTAnswerErr
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVcc_Drv
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCompV
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_All_IO
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Time
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pulse_kl_test_time_us
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
</UL>

<P><STRONG><a name="[184]"></a>kl_setup</STRONG> (Thumb, 932 bytes, Stack size 40 bytes, selftest.o(i.kl_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = kl_setup &rArr; Reset_All_IO &rArr; Reset_Line &rArr; SetEclk &rArr; tx_c_channel &rArr; tx_spi_one_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCChannel
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_time
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_LINE_STATUS
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_c_channel
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVcc_Drv
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLine_ext
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCompV
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_All_IO
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Dac
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
</UL>

<P><STRONG><a name="[5b]"></a>main</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = main &rArr; main_minivci_app &rArr; mmain &rArr; _MainRoute &rArr; Transmit_Pass &rArr; _SysFunc &rArr; Write_Ver &rArr; ProgramDatatoFlash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_minivci_app
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_LEDOn
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_LEDInit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM322xG_LCD_Init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBackColor
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetFont
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[197]"></a>main_minivci_app</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, main_minivci.o(i.main_minivci_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = main_minivci_app &rArr; mmain &rArr; _MainRoute &rArr; Transmit_Pass &rArr; _SysFunc &rArr; Write_Ver &rArr; ProgramDatatoFlash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluepincmddatesend
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMA_init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Mode_Config
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_NVIC_Configuration
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEclk
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_WatchDog
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Config
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_GPIO_Config
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCompV
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmain
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19d]"></a>mmain</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, mmain.o(i.mmain))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = mmain &rArr; _MainRoute &rArr; Transmit_Pass &rArr; _SysFunc &rArr; Write_Ver &rArr; ProgramDatatoFlash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCompV
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Line
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_All_IO
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_Default_SetConfig
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MainRoute
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_minivci_app
</UL>

<P><STRONG><a name="[182]"></a>nissan_pulse_test</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, selftest.o(i.nissan_pulse_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = nissan_pulse_test &rArr; pulse_kl_test_time &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCChannel
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEclk
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_c_channel
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVcc_Drv
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLine_ext
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCompV
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pulse_kl_test_time
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
</UL>

<P><STRONG><a name="[18e]"></a>printf_usb</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bluewifi.o(i.printf_usb))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluecmdsend
</UL>

<P><STRONG><a name="[18b]"></a>pulse_kl_test_time</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, selftest.o(i.pulse_kl_test_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pulse_kl_test_time &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_time
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNus
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nissan_pulse_test
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_pulse_width
</UL>

<P><STRONG><a name="[191]"></a>pulse_kl_test_time_us</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, selftest.o(i.pulse_kl_test_time_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pulse_kl_test_time_us &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_time
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNus
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetPrescaler
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kl_pulse
</UL>

<P><STRONG><a name="[17e]"></a>record_data</STRONG> (Thumb, 390 bytes, Stack size 296 bytes, mmain.o(i.record_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = record_data &rArr; ProgramDatatoFlash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMA_Send_ext_1768
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramDatatoFlash
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErasePage
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
</UL>

<P><STRONG><a name="[15f]"></a>rx164dat</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, passthru.o(i.rx164dat))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rx164dat &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNus
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetExtCh
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
</UL>

<P><STRONG><a name="[17f]"></a>setPortStatus</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, selftest.o(i.setPortStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = setPortStatus &rArr; SetLine_ext &rArr; tx_rx_mode_change &rArr; tx_c_channel &rArr; tx_spi_one_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEcuLineLoadMode
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLine_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
</UL>

<P><STRONG><a name="[183]"></a>test_kl_can</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, selftest.o(i.test_kl_can))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = test_kl_can &rArr; SetLine_ext &rArr; tx_rx_mode_change &rArr; tx_c_channel &rArr; tx_spi_one_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCChannel
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLine_ext
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Dac
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
</UL>

<P><STRONG><a name="[13d]"></a>test_nisan_pwm</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, passthru_kwp.o(i.test_nisan_pwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = test_nisan_pwm &rArr; SetLine_ext &rArr; tx_rx_mode_change &rArr; tx_c_channel &rArr; tx_spi_one_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLine_ext
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Dac
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_InitPort
</UL>

<P><STRONG><a name="[100]"></a>time_div</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, time.o(i.time_div))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_time
</UL>

<P><STRONG><a name="[15e]"></a>tx164dat</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, passthru.o(i.tx164dat))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tx164dat &rArr; DelayNms &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetExtCh
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
</UL>

<P><STRONG><a name="[154]"></a>tx_PINSEL_channel</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, passthru.o(i.tx_PINSEL_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tx_PINSEL_channel &rArr; tx_spi_one_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_spi_one_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLine1Channel
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLine0Channel
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLine_ext
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Line
</UL>

<P><STRONG><a name="[124]"></a>tx_c_channel</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, passthru.o(i.tx_c_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tx_c_channel &rArr; tx_spi_one_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_spi_one_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_DrvPort
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCChannel
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetExtCh
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEcuLineLoadMode
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEclk
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_down_test
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nissan_pulse_test
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kl_setup
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kl_pulse
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPortStatus
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestShortCiruit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOpen_iobd
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOpenCiruit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxPort
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Line
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_VPW_InitPort
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PWM_InitPort
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PLUSE_InitPort
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_ISO_InitPort
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_SetConfig
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_InitPort
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_WAVE_ReadWave
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_rx_mode_change
</UL>

<P><STRONG><a name="[162]"></a>tx_rx_mode_change</STRONG> (Thumb, 590 bytes, Stack size 24 bytes, hardware.o(i.tx_rx_mode_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tx_rx_mode_change &rArr; tx_c_channel &rArr; tx_spi_one_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_c_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLine_ext
</UL>

<P><STRONG><a name="[1a0]"></a>tx_spi_one_byte</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, passthru.o(i.tx_spi_one_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_spi_one_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_PINSEL_channel
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_c_channel
</UL>

<P><STRONG><a name="[181]"></a>up_down_test</STRONG> (Thumb, 1186 bytes, Stack size 40 bytes, selftest.o(i.up_down_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = up_down_test &rArr; Circle_test &rArr; SetLine_ext &rArr; tx_rx_mode_change &rArr; tx_c_channel &rArr; tx_spi_one_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCChannel
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_LINE_STATUS
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_c_channel
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVcc_Drv
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCompV
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_test
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFunc
</UL>

<P><STRONG><a name="[190]"></a>vcc_drv_v</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mmain.o(i.vcc_drv_v))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vcc_drv_v &rArr; DelayNms &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVcc_Drv
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Dac
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_vcc_test
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[157]"></a>delay</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, stm322xg_eval_lcd.o(i.delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = delay
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM322xG_LCD_Init
</UL>

<P><STRONG><a name="[165]"></a>SetSysClock</STRONG> (Thumb, 140 bytes, Stack size 12 bytes, system_stm32f2xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[164]"></a>SpecialFun</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, mmain.o(i.SpecialFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SpecialFun &rArr; UARTAnswerErr &rArr; UartTxQueuePack
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTAnswerErr
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Pass
</UL>

<P><STRONG><a name="[16f]"></a>_SetBusAndMode</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, mmain.o(i._SetBusAndMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _SetBusAndMode &rArr; UARTAnswer &rArr; UartTxQueuePack
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTAnswer
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Pass
</UL>

<P><STRONG><a name="[170]"></a>_SysFunc</STRONG> (Thumb, 882 bytes, Stack size 40 bytes, mmain.o(i._SysFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = _SysFunc &rArr; Write_Ver &rArr; ProgramDatatoFlash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_down_test
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_c_channel
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx164dat
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_kl_can
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPortStatus
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx164dat
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nissan_pulse_test
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kl_setup
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kl_pulse
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPortStatus
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_vcc_test
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_pulse_width
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr08_return
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Ver
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTAnswerErr
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestShortCiruit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOpen_iobd
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOpenCiruit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVcc_Drv
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxPort
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSoftUart
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLine_ext
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCompV
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Line
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Fun
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_All_IO
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_bl_addr
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Ver
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Dac
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_Default_SetConfig
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_CAN_SELFTEST
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_UART_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVer
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetP0status
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Test
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Test
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_data
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Pass
</UL>

<P><STRONG><a name="[179]"></a>_Cal_parity</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, newsoftuart.o(i._Cal_parity))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SoftTxByte2
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SoftTxByte
</UL>

<P><STRONG><a name="[ca]"></a>RunWithWait</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, passthru.o(i.RunWithWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RunWithWait
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_KEEP_COM
</UL>

<P><STRONG><a name="[60]"></a>PassThru_BENZ_InitEcu</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, passthru_benz.o(i.PassThru_BENZ_InitEcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PassThru_BENZ_InitEcu &rArr; SoftPulse &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftPulse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_benz.o(i.PassThru_BENZ_InitPort)
</UL>
<P><STRONG><a name="[64]"></a>PassThru_BENZ_RxPack_DirectRead</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, passthru_benz.o(i.PassThru_BENZ_RxPack_DirectRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = PassThru_BENZ_RxPack_DirectRead &rArr; PassThru_KWP_RxPack_DirectRead &rArr; SoftUartRxByte &rArr; DelayN_Count_Get_Logic_count &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendByte
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_KWP_RxPack_DirectRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_benz.o(i.PassThru_BENZ_InitPort)
</UL>
<P><STRONG><a name="[62]"></a>PassThru_BENZ_RxPack_Normal</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, passthru_benz.o(i.PassThru_BENZ_RxPack_Normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = PassThru_BENZ_RxPack_Normal &rArr; PassThru_BENZ_RxPack_WithSend &rArr; DelayTxByte &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Bus_status
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_BENZ_RxPack_WithSend
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEndmsCounter
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_BENZ_RxPack_SimuEcu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_benz.o(i.PassThru_BENZ_InitPort)
</UL>
<P><STRONG><a name="[63]"></a>PassThru_BENZ_RxPack_SimuEcu</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, passthru_benz.o(i.PassThru_BENZ_RxPack_SimuEcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = PassThru_BENZ_RxPack_SimuEcu &rArr; PassThru_BENZ_RxPack_Normal &rArr; PassThru_BENZ_RxPack_WithSend &rArr; DelayTxByte &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_BENZ_RxPack_Normal
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayN_Count_Get_Logic_count
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_LINE_STATUS
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_benz.o(i.PassThru_BENZ_InitPort)
</UL>
<P><STRONG><a name="[123]"></a>PassThru_BENZ_RxPack_WithSend</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, passthru_benz.o(i.PassThru_BENZ_RxPack_WithSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PassThru_BENZ_RxPack_WithSend &rArr; DelayTxByte &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Bus_status
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEndmsCounter
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayTxByte
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_BENZ_RxPack_Normal
</UL>

<P><STRONG><a name="[61]"></a>PassThru_BENZ_TxPack_Normal</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, passthru_benz.o(i.PassThru_BENZ_TxPack_Normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = PassThru_BENZ_TxPack_Normal &rArr; GetLineMonitor &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEndmsCounter
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLineMonitor
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayTxByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_benz.o(i.PassThru_BENZ_InitPort)
</UL>
<P><STRONG><a name="[65]"></a>PassThru_BENZ_TxPack_WithRev</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, passthru_benz.o(i.PassThru_BENZ_TxPack_WithRev))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = PassThru_BENZ_TxPack_WithRev &rArr; GetLineMonitor &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEndmsCounter
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLineMonitor
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_benz.o(i.PassThru_BENZ_InitPort)
</UL>
<P><STRONG><a name="[7f]"></a>PassThru_PLUSE_ReadCodeByte</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, passthru_pluse.o(i.PassThru_PLUSE_ReadCodeByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = PassThru_PLUSE_ReadCodeByte &rArr; _ReadPulseByte_SPD &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_LINE_STATUS
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadPulseByte_SPD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_pluse.o(i.PassThru_PLUSE_InitPort)
</UL>
<P><STRONG><a name="[7d]"></a>PassThru_PLUSE_ReadDataStream</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, passthru_pluse.o(i.PassThru_PLUSE_ReadDataStream))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PassThru_PLUSE_ReadDataStream &rArr; SkipNbit &rArr; DelayN_Count &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipNbit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_LINE_STATUS
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLUSE_RxPack_Normal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_pluse.o(i.PassThru_PLUSE_InitPort)
</UL>
<P><STRONG><a name="[7c]"></a>PassThru_PLUSE_SendCodeByte</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, passthru_pluse.o(i.PassThru_PLUSE_SendCodeByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = PassThru_PLUSE_SendCodeByte &rArr; _TxBytePulse &rArr; SoftPulse &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TxBytePulse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_pluse.o(i.PassThru_PLUSE_InitPort)
</UL>
<P><STRONG><a name="[80]"></a>PassThru_PLUSE_SendCodeBytes</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, passthru_pluse.o(i.PassThru_PLUSE_SendCodeBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = PassThru_PLUSE_SendCodeBytes &rArr; SoftPulse &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftPulse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_pluse.o(i.PassThru_PLUSE_InitPort)
</UL>
<P><STRONG><a name="[7e]"></a>PassThru_PLUSE_SendDataStream</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, passthru_pluse.o(i.PassThru_PLUSE_SendDataStream))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PassThru_PLUSE_SendDataStream &rArr; _SoftTxByte &rArr; DelayN_Count &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SoftTxByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> passthru_pluse.o(i.PassThru_PLUSE_InitPort)
</UL>
<P><STRONG><a name="[143]"></a>_ReadPulseByte_SPD</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, passthru_pluse.o(i._ReadPulseByte_SPD))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _ReadPulseByte_SPD &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_time
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PLUSE_ReadCodeByte
</UL>

<P><STRONG><a name="[145]"></a>_TxBytePulse</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, passthru_pluse.o(i._TxBytePulse))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _TxBytePulse &rArr; SoftPulse &rArr; DelayNus &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftPulse
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PLUSE_SendCodeByte
</UL>

<P><STRONG><a name="[148]"></a>PassThru_PWM_RxPack_SingleFrame</STRONG> (Thumb, 472 bytes, Stack size 56 bytes, passthru_pwm.o(i.PassThru_PWM_RxPack_SingleFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = PassThru_PWM_RxPack_SingleFrame &rArr; Int_time &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_time
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxQueuePack
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTAnswer
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PWM_TXBYTE
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassThru_PWM_RxPack_Normal
</UL>

<P><STRONG><a name="[176]"></a>_tea</STRONG> (Thumb, 142 bytes, Stack size 20 bytes, code.o(i._tea))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _tea
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Ver
</UL>

<P><STRONG><a name="[189]"></a>_printf_core</STRONG> (Thumb, 334 bytes, Stack size 88 bytes, printf1.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$1
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
